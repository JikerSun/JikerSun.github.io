<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JakieSun_厕所蹲个驴</title>
  
  <subtitle>韶华不为少年留,恨悠悠,几时休</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-05-25T03:48:20.512Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JakieSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>海外服务器购买搭建</title>
    <link href="http://yoursite.com/2022/05/25/%E6%B5%B7%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2022/05/25/%E6%B5%B7%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-25T07:45:44.000Z</published>
    <updated>2022-05-25T03:48:20.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="海外服务器购买搭建"><a href="#海外服务器购买搭建" class="headerlink" title="海外服务器购买搭建"></a>海外服务器购买搭建</h1><hr><h2 id="服务器购买"><a href="#服务器购买" class="headerlink" title="服务器购买:"></a>服务器购买:</h2><p><a href="https://kvm.yunserver.com/clientarea.php?action=productdetails&amp;id=11365" target="_blank" rel="noopener">服务器购买链接</a></p><p><img src="/images/out_ear_sever-01.png" alt="&quot;image&quot;"></p><h2 id="本地服务器搭建"><a href="#本地服务器搭建" class="headerlink" title="本地服务器搭建"></a>本地服务器搭建</h2><h3 id="1-打开”终端”-左键图标-用户-’root’-上面服务器添加加号"><a href="#1-打开”终端”-左键图标-用户-’root’-上面服务器添加加号" class="headerlink" title="1. 打开”终端”, 左键图标 (用户:’root’), 上面服务器添加加号"></a>1. 打开”终端”, 左键图标 (用户:’root’), 上面服务器添加加号</h3><p><img src="/images/out_ear_sever-02.png" alt="&quot;image&quot;"></p><h3 id="2-点击链接弹出密码输入-输入服务器密码"><a href="#2-点击链接弹出密码输入-输入服务器密码" class="headerlink" title="2. 点击链接弹出密码输入, 输入服务器密码"></a>2. 点击链接弹出密码输入, 输入服务器密码</h3><h3 id="3-根据-这个网址-输入脚本"><a href="#3-根据-这个网址-输入脚本" class="headerlink" title="3. 根据 这个网址 输入脚本"></a>3. 根据 <a href="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程" target="_blank" rel="noopener">这个网址</a> 输入脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>选择websocket剩下一路enter</p><h3 id="4-搭建成功之后-输入v2ray-url-获取v2ray-需要的配置链接-目前链接如下"><a href="#4-搭建成功之后-输入v2ray-url-获取v2ray-需要的配置链接-目前链接如下" class="headerlink" title="4. 搭建成功之后 输入v2ray url 获取v2ray 需要的配置链接 目前链接如下:"></a>4. 搭建成功之后 输入v2ray url 获取v2ray 需要的配置链接 目前链接如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmess://ewoidiI6ICIyIiwKInBzIjogIjIzM3YyLmNvbV8xNTQuMTIuMzUuMTY4IiwKImFkZCI6ICIxNTQuMTIuMzUuMTY4IiwKInBvcnQiOiAiMjUxMTgiLAoiaWQiOiAiY2NjMzA3NWYtZGY4MS00MjllLWExNTgtYWNmNmYyYWQ3MWI5IiwKImFpZCI6ICIwIiwKIm5ldCI6ICJ3cyIsCiJ0eXBlIjogIm5vbmUiLAoiaG9zdCI6ICIiLAoicGF0aCI6ICIiLAoidGxzIjogIiIKfQo=</span><br></pre></td></tr></table></figure><h3 id="5-安装-V2rayU-选择如下"><a href="#5-安装-V2rayU-选择如下" class="headerlink" title="5. 安装:V2rayU, 选择如下:"></a>5. 安装:V2rayU, 选择如下:</h3><p><img src="/images/out_ear_sever-03.png" alt="&quot;image&quot;"><br>将4中链接粘贴到url框中就可以了, 选择全局模式</p><h2 id="注-如果还是无法连接看一下本地是否有占用代理端口的其他设置-部分参考"><a href="#注-如果还是无法连接看一下本地是否有占用代理端口的其他设置-部分参考" class="headerlink" title="注: 如果还是无法连接看一下本地是否有占用代理端口的其他设置, 部分参考:"></a>注: 如果还是无法连接看一下本地是否有占用代理端口的其他设置, 部分参考:</h2><p><a href="https://blog.csdn.net/qq_33182756/article/details/106644003" target="_blank" rel="noopener">本地端口重复的时候点这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;海外服务器购买搭建&quot;&gt;&lt;a href=&quot;#海外服务器购买搭建&quot; class=&quot;headerlink&quot; title=&quot;海外服务器购买搭建&quot;&gt;&lt;/a&gt;海外服务器购买搭建&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;服务器购买&quot;&gt;&lt;a href=&quot;#服务器购买&quot; class=&quot;h
      
    
    </summary>
    
    
    
      <category term="技术探索" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>自动打包服务器搭建</title>
    <link href="http://yoursite.com/2022/02/10/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2022/02/10/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-10T03:42:33.000Z</published>
    <updated>2022-02-10T05:55:34.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-mini-服务器环境配置"><a href="#Mac-mini-服务器环境配置" class="headerlink" title="Mac mini 服务器环境配置"></a>Mac mini 服务器环境配置</h1><h3 id="1-服务器账号密码"><a href="#1-服务器账号密码" class="headerlink" title="1. 服务器账号密码"></a>1. 服务器账号密码</h3><p>屏幕共享IP地址: 192.168.2.215(zerodisplay wifi下的ip 其他wifi自行查看)<br>账号: mac_mini_server<br>密码: 0uanQuan!</p><h3 id="2-苹果账号密码-杭州"><a href="#2-苹果账号密码-杭州" class="headerlink" title="2. 苹果账号密码(杭州)"></a>2. 苹果账号密码(杭州)</h3><p>账号: apply_for_sdk@zerozero.cn<br>密码: Zero00!#%</p><h3 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3. 环境配置"></a>3. 环境配置</h3><p><a href="https://www.jianshu.com/p/e4342f421782?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">参考</a><br>安装HomeBrew环境: /bin/bash -c “$(curl -fsSL <a href="https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh</a>)”<br>安装yarn环境<br>安装RN环境<br>ios项目添加fastlane环境<br>ios项目添加cocopods环境: 1.8.4<br>配置Python 环境</p><h3 id="4-添加新的mini服务器"><a href="#4-添加新的mini服务器" class="headerlink" title="4. 添加新的mini服务器"></a>4. 添加新的mini服务器</h3><p>找帅平在master服务器上添加新的mini服务器配置<br><img src="/images/mac_mini_config1.png" alt="&quot;image&quot;"><br><img src="/images/mac_mini_config2.png" alt="&quot;image&quot;"></p><p>将新mini的git 公钥配置到git上: <a href="https://blog.csdn.net/huqiankunlol/article/details/93485719" target="_blank" rel="noopener">https://blog.csdn.net/huqiankunlol/article/details/93485719</a> (当前新的mini的注册邮箱是: mac_server_new@zerozero.cn 密码:0uanQuan!)<br>注意: 拉取的git账号用上面那个没法设置成功所以我按照旧的mac mini上的那个配置改成了如下图所示<br><img src="/images/mac_mini_config3.png" alt="&quot;image&quot;"></p><h3 id="5-yarn-install出错的时候可能是node版本错误-目前稳定的版本是node-v10-15-3"><a href="#5-yarn-install出错的时候可能是node版本错误-目前稳定的版本是node-v10-15-3" class="headerlink" title="5. yarn install出错的时候可能是node版本错误, 目前稳定的版本是node v10.15.3"></a>5. yarn install出错的时候可能是node版本错误, 目前稳定的版本是node v10.15.3</h3><h3 id="6-将新电脑设置的git账号-当前新的mini的注册邮箱是-mac-server-new-zerozero-cn-密码-0uanQuan-在git相关的权限都打开-比如GPUImage这些加锁的库-最好就是搞成owner就行了"><a href="#6-将新电脑设置的git账号-当前新的mini的注册邮箱是-mac-server-new-zerozero-cn-密码-0uanQuan-在git相关的权限都打开-比如GPUImage这些加锁的库-最好就是搞成owner就行了" class="headerlink" title="6. 将新电脑设置的git账号(当前新的mini的注册邮箱是: mac_server_new@zerozero.cn 密码:0uanQuan!) 在git相关的权限都打开, 比如GPUImage这些加锁的库, 最好就是搞成owner就行了"></a>6. 将新电脑设置的git账号(当前新的mini的注册邮箱是: mac_server_new@zerozero.cn 密码:0uanQuan!) 在git相关的权限都打开, 比如GPUImage这些加锁的库, 最好就是搞成owner就行了</h3><h3 id="7-安装gem是需要输入mac密码的解决-https-www-cnblogs-com-lwh-note-p-10208274-html"><a href="#7-安装gem是需要输入mac密码的解决-https-www-cnblogs-com-lwh-note-p-10208274-html" class="headerlink" title="7. 安装gem是需要输入mac密码的解决: https://www.cnblogs.com/lwh-note/p/10208274.html"></a>7. 安装gem是需要输入mac密码的解决: <a href="https://www.cnblogs.com/lwh-note/p/10208274.html" target="_blank" rel="noopener">https://www.cnblogs.com/lwh-note/p/10208274.html</a></h3><p>echo ‘[[ -s “$HOME/.rvm/scripts/rvm” ]] &amp;&amp; . “$HOME/.rvm/scripts/rvm”‘ &gt;&gt;~/.bashrc<br>source ~/.bashrc<br>ruby -v</p><h3 id="8-所有的非上线版本都是用北京的账号中的企业证书申请的-wangmengqiu-zerozero-cn-上线的证书是杭州证书-apply-for-sdk-zerozero-cn"><a href="#8-所有的非上线版本都是用北京的账号中的企业证书申请的-wangmengqiu-zerozero-cn-上线的证书是杭州证书-apply-for-sdk-zerozero-cn" class="headerlink" title="8. 所有的非上线版本都是用北京的账号中的企业证书申请的(wangmengqiu@zerozero.cn), 上线的证书是杭州证书(apply_for_sdk@zerozero.cn)"></a>8. 所有的非上线版本都是用北京的账号中的企业证书申请的(wangmengqiu@zerozero.cn), 上线的证书是杭州证书(apply_for_sdk@zerozero.cn)</h3><h3 id="9-所有的线上和企业证书都是从旧的mac-mini上生成导出的-p12文件-有时间得做一下新的证书了"><a href="#9-所有的线上和企业证书都是从旧的mac-mini上生成导出的-p12文件-有时间得做一下新的证书了" class="headerlink" title="9. 所有的线上和企业证书都是从旧的mac mini上生成导出的.p12文件(有时间得做一下新的证书了)"></a>9. 所有的线上和企业证书都是从旧的mac mini上生成导出的.p12文件(有时间得做一下新的证书了)</h3><h3 id="10-证书点击第一次的系统信任问题-https-blog-csdn-net-sodaslay-article-details-51438273"><a href="#10-证书点击第一次的系统信任问题-https-blog-csdn-net-sodaslay-article-details-51438273" class="headerlink" title="10. 证书点击第一次的系统信任问题: https://blog.csdn.net/sodaslay/article/details/51438273"></a>10. 证书点击第一次的系统信任问题: <a href="https://blog.csdn.net/sodaslay/article/details/51438273" target="_blank" rel="noopener">https://blog.csdn.net/sodaslay/article/details/51438273</a></h3><p><a href="https://blog.csdn.net/sodaslay/article/details/51438273" target="_blank" rel="noopener">https://blog.csdn.net/sodaslay/article/details/51438273</a><br>以上链接是参考链接, 看看就好了, 解决方案在下面:<br>其实就是去xcode里面点一下 信任这个mac就好了, 注意 钥匙串里面的证书千万别点始终信任, 一定要系统默认,<br>然后一地次用xcode 手动archive 会出现输密码的框, 点击始终允许就可以了, 这个搞了我一天, 烦死了</p><h3 id="11-将需要改为新服务机的ci项目修改一下节点服务器就可以了-如下图"><a href="#11-将需要改为新服务机的ci项目修改一下节点服务器就可以了-如下图" class="headerlink" title="11. 将需要改为新服务机的ci项目修改一下节点服务器就可以了, 如下图:"></a>11. 将需要改为新服务机的ci项目修改一下节点服务器就可以了, 如下图:</h3><p><img src="/images/mac_mini_config4.png" alt="&quot;image&quot;"></p><h3 id="12-master包第一次跑务必在新的mac-mini终端上-跑ci最后的哪句fastlane的语句-因为会在终端让你输入当时第一次设置的密码Passphrase-for-Match-storage-密码为-00-Wuxian-输入两次-记住啦-之前开发的同事没有记录-我挨个试了一个多小时-心累"><a href="#12-master包第一次跑务必在新的mac-mini终端上-跑ci最后的哪句fastlane的语句-因为会在终端让你输入当时第一次设置的密码Passphrase-for-Match-storage-密码为-00-Wuxian-输入两次-记住啦-之前开发的同事没有记录-我挨个试了一个多小时-心累" class="headerlink" title="12. master包第一次跑务必在新的mac mini终端上 跑ci最后的哪句fastlane的语句, 因为会在终端让你输入当时第一次设置的密码Passphrase for Match storage: 密码为: 00@Wuxian 输入两次 记住啦 之前开发的同事没有记录, 我挨个试了一个多小时, 心累!!!"></a>12. master包第一次跑务必在新的mac mini终端上 跑ci最后的哪句fastlane的语句, 因为会在终端让你输入当时第一次设置的密码Passphrase for Match storage: 密码为: 00@Wuxian 输入两次 记住啦 之前开发的同事没有记录, 我挨个试了一个多小时, 心累!!!</h3><h3 id="ps-CI环境配置-服务器搭建gitlab并配置CI-CD-jenkins方式"><a href="#ps-CI环境配置-服务器搭建gitlab并配置CI-CD-jenkins方式" class="headerlink" title="ps. CI环境配置(服务器搭建gitlab并配置CI/CD, jenkins方式)"></a>ps. CI环境配置(服务器搭建gitlab并配置CI/CD, jenkins方式)</h3><p>用不到这种ps中的方法搭建,直接总的master服务器添加新的mini就可以了, 找帅平搞定<br><a href="https://www.jianshu.com/p/5eda1a35246b?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">参考链接</a><br><a href="https://zerozero.yuque.com/app-dev/cgkemh/nctp13" target="_blank" rel="noopener">参考2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-mini-服务器环境配置&quot;&gt;&lt;a href=&quot;#Mac-mini-服务器环境配置&quot; class=&quot;headerlink&quot; title=&quot;Mac mini 服务器环境配置&quot;&gt;&lt;/a&gt;Mac mini 服务器环境配置&lt;/h1&gt;&lt;h3 id=&quot;1-服务器账号密码
      
    
    </summary>
    
    
    
      <category term="自动化打包" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>iOS RN热更新</title>
    <link href="http://yoursite.com/2021/04/23/iOS%20RN%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2021/04/23/iOS%20RN%E7%83%AD%E6%9B%B4%E6%96%B0/</id>
    <published>2021-04-23T07:55:06.000Z</published>
    <updated>2021-04-23T09:21:28.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-RN热更新"><a href="#iOS-RN热更新" class="headerlink" title="iOS RN热更新"></a>iOS RN热更新</h1><hr><h2 id="CodePush-RN库"><a href="#CodePush-RN库" class="headerlink" title="CodePush RN库"></a>CodePush RN库</h2><p>链接: </p><ol><li><p><a href="https://www.jianshu.com/p/3b0cb280eb19?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">https://www.jianshu.com/p/3b0cb280eb19?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p></li><li><p><a href="https://github.com/microsoft/react-native-code-push/blob/master/docs/setup-ios.md" target="_blank" rel="noopener">https://github.com/microsoft/react-native-code-push/blob/master/docs/setup-ios.md</a></p></li><li><a href="https://www.jianshu.com/p/cd7576af381f" target="_blank" rel="noopener">https://www.jianshu.com/p/cd7576af381f</a></li></ol><h2 id="APPcenter-codepush语法"><a href="#APPcenter-codepush语法" class="headerlink" title="APPcenter codepush语法"></a>APPcenter codepush语法</h2><p><a href="https://www.jianshu.com/p/d51967964a81" target="_blank" rel="noopener">https://www.jianshu.com/p/d51967964a81</a><br><a href="https://blog.csdn.net/ybf326/article/details/102735264" target="_blank" rel="noopener">https://blog.csdn.net/ybf326/article/details/102735264</a></p><h2 id="Xcode项目修改"><a href="#Xcode项目修改" class="headerlink" title="Xcode项目修改:"></a>Xcode项目修改:</h2><p><img src="/images/codepush_1.png" alt="&quot;image&quot;"><br><img src="/images/codepush_2.png" alt="&quot;image&quot;"><br><img src="/images/codepush_3.png" alt="&quot;image&quot;"></p><h2 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码:"></a>脚本代码:</h2><ol><li>进入到rn项目文件夹中: cd xxx/</li><li><code>yarn global add appcenter-cli</code> 安装appcenter-cli环境 完事后 <code>appcenter --version1</code> 判断安装是否成功</li><li><code>appcenter codepush release-react -a apply_for_sdk-zerozero.cn/V-Coptr-ios -d Staging -c ./CodePush -t 1.0.0 --description &quot;提交描述&quot;</code> 来更新代码, 具体其他命令可以看上面的链接</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS-RN热更新&quot;&gt;&lt;a href=&quot;#iOS-RN热更新&quot; class=&quot;headerlink&quot; title=&quot;iOS RN热更新&quot;&gt;&lt;/a&gt;iOS RN热更新&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;CodePush-RN库&quot;&gt;&lt;a href=&quot;#CodePush
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于主播相关的记录与备忘</title>
    <link href="http://yoursite.com/2020/11/25/%E4%B8%BB%E6%92%AD%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2020/11/25/%E4%B8%BB%E6%92%AD%E7%9B%B8%E5%85%B3/</id>
    <published>2020-11-25T02:55:06.000Z</published>
    <updated>2020-11-25T03:07:40.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一期话题选定与记录"><a href="#第一期话题选定与记录" class="headerlink" title="第一期话题选定与记录"></a>第一期话题选定与记录</h1><hr><h2 id="1-疫情相关话题"><a href="#1-疫情相关话题" class="headerlink" title="1. 疫情相关话题"></a>1. 疫情相关话题</h2><ul><li><p>1.1 当今新冠现状, 感染范围以及疫情时长持续性</p></li><li><p>1.2 疫苗进展, 国际形势</p></li><li><p>1.3 古今中外几大瘟疫爆发历史(埃博拉, 黑死病, 鼠疫等)</p></li><li><p>1.4 传染疾病的预防与控制</p></li><li><p>1.5 欢迎收听,开业大吉</p></li></ul><hr><h2 id="2-婚姻相关话题-下次补全"><a href="#2-婚姻相关话题-下次补全" class="headerlink" title="2. 婚姻相关话题(下次补全)"></a>2. 婚姻相关话题(下次补全)</h2><hr><h2 id="3-未想好"><a href="#3-未想好" class="headerlink" title="3. 未想好"></a>3. 未想好</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一期话题选定与记录&quot;&gt;&lt;a href=&quot;#第一期话题选定与记录&quot; class=&quot;headerlink&quot; title=&quot;第一期话题选定与记录&quot;&gt;&lt;/a&gt;第一期话题选定与记录&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-疫情相关话题&quot;&gt;&lt;a href=&quot;#1-疫情相关话题
      
    
    </summary>
    
    
    
      <category term="主播相关" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%92%AD%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + Fastlane 自动打包</title>
    <link href="http://yoursite.com/2020/10/23/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2020/10/23/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-10-23T03:42:33.000Z</published>
    <updated>2020-11-24T02:47:18.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h1><p><a href="https://www.jenkins.io" target="_blank" rel="noopener">Jenkins官网</a></p><p><a href="https://fastlane.tools" target="_blank" rel="noopener">fastlane</a></p><p>fastlane 用于自动打包</p><p>jenkins 用于管理git上传代码 (内部跑fastlane的shell 脚本)</p><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/0a113f754c09" target="_blank" rel="noopener">Jenkins + Fastlane + GitLab + 蒲公英</a></p><p><a href="https://www.jianshu.com/p/be2d3b919633" target="_blank" rel="noopener">https://www.jianshu.com/p/be2d3b919633</a></p><p><a href="https://www.cnblogs.com/zhujin/p/9064820.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhujin/p/9064820.html</a></p><p><a href="https://www.jianshu.com/p/c4abfbf1c9d7" target="_blank" rel="noopener">Jenkins + Fastlane + GitLab + fir</a></p><p><a href="https://www.jianshu.com/p/44bbe1a31b52" target="_blank" rel="noopener">fastlane 实现自定义Action</a></p><hr><h3 id="Fastlane环境搭建"><a href="#Fastlane环境搭建" class="headerlink" title="Fastlane环境搭建"></a>Fastlane环境搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">现在对Appfile，Fastfile，Gemfile，Deliverfile文件说明如下：</span><br><span class="line"></span><br><span class="line">Appfile: 存储有关开发者账号相关信息</span><br><span class="line">Fastfile: 核心文件，用于命令行调用和处理具体的流程，lane相对于一个action方法或函数 </span><br><span class="line">Gemfile 类似于cocopods 的Podfile文件</span><br><span class="line">.env 配置环境变量（在fastlane init进行初始化后并不会自动生成，如果需要可以自己创建</span><br><span class="line">Deliverfile: deliver工具的配置文件，上传截图苹果和后台一些app信息  (默认不生成，需要sudo gem install deliver安装)然后在fastlane 目录下执行deliver init 即可）</span><br><span class="line">要注意的点：</span><br><span class="line">build_app命令等同于gym(别名)</span><br><span class="line">deliver 命令相当于upload_to_app_store(别名)</span><br></pre></td></tr></table></figure><p>1.检查Ruby版本，需要2.0及以上版本。在终端输入以下命令确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><p>需要注意的是需要将gem的source改为<a href="https://link.jianshu.com/?t=https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a>。<br>如何检查?在终端输入以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources</span><br></pre></td></tr></table></figure><p>结果应为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//gems.ruby-china.org/</span></span><br></pre></td></tr></table></figure><p>2.检查Xcode命令行工具是否安装。在终端输入以下命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> --install</span><br></pre></td></tr></table></figure><p>如果没有安装会进行安装。如果已经安装了则会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">"Software Update"</span> to install updates</span><br></pre></td></tr></table></figure><p>3.安装Fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install fastlane --verbose</span><br></pre></td></tr></table></figure><p>如果出现以下错误：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  <span class="keyword">While</span> executing gem ... (Errno::EPERM)</span><br><span class="line">    Operation not permitted - /usr/bin/rougify</span><br></pre></td></tr></table></figure><p>则输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin fastlane</span><br></pre></td></tr></table></figure><p>4.检查Fastlane是否正确安装。输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane --version</span><br></pre></td></tr></table></figure><p>可以看到Fastlane版本信息，我的是2.46.1。</p><p>5.进入项目根目录创建faslane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>中间会让你输入苹果开发者账号的账号和密码，之后会在你项目工程的目录下生成一个fastlane文件夹，里面有Fastlane的配置文件，一个是Appfile文件，一个是Fastfile文件(如果要上传AppStore的话还有Deliverfile文件)。Appfile保存苹果开发者的相关信息、项目的相关信息等。Fastfile是运行脚本。</p><p>信息选择如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[15:08:29]: What would you like to use fastlane for?</span><br><span class="line">1. 📸  Automate screenshots</span><br><span class="line">2. 👩‍✈️  Automate beta distribution to TestFlight</span><br><span class="line">3. 🚀  Automate App Store distribution</span><br><span class="line">4. 🛠  Manual setup - manually setup your project to automate your tasks</span><br><span class="line">?  </span><br><span class="line"></span><br><span class="line">翻译：</span><br><span class="line">1. 自动截屏。这个功能能帮我们自动截取APP中的截图，并添加手机边框（如果需要的话），我们这里不选择这个选项，因为我们的项目已经有图片了，不需要这里截屏。</span><br><span class="line">2. 自动发布beta版本用于TestFlight，如果大家有对TestFlight不了解的，可以参考王巍写的这篇文章</span><br><span class="line">3. 自动的App Store发布包。我们的目标是要提交审核到APP Store，按道理应该选这个，但这里我们先不选，因为选择了以后会需要输入用户名密码，以及下载meta信息，需要花费一定时间，这些数据我们可以后期进行配置。</span><br><span class="line">4. 手动设置。</span><br></pre></td></tr></table></figure><p>6.如果是蒲公英的话</p><p>打开终端，进入你的项目工程的根目录，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin pgyer</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plugin <span class="string">'fastlane-plugin-pgyer'</span> was added to <span class="string">'./fastlane/Pluginfile'</span></span><br><span class="line">It looks like fastlane plugins are not yet <span class="keyword">set</span> up <span class="keyword">for</span> <span class="keyword">this</span> project.</span><br><span class="line">fastlane will create a <span class="keyword">new</span> Gemfile at path <span class="string">'Gemfile'</span></span><br><span class="line">This change <span class="keyword">is</span> necessary <span class="keyword">for</span> fastlane plugins to work</span><br><span class="line">Should fastlane modify the Gemfile at path <span class="string">'Gemfile'</span> <span class="keyword">for</span> you?</span><br><span class="line">(y/n)</span><br></pre></td></tr></table></figure><p>输入y按回车，出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installing plugin dependencies...</span><br><span class="line">Successfully installed plugins</span><br></pre></td></tr></table></figure><p>便是安装成功了。</p><p>如果是fir的话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin fir</span><br></pre></td></tr></table></figure><p>如果出现报错如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not find action, lane or variable &apos;firim&apos;. Check out the documentation for more details: https://docs.fastlane.tools/actions</span><br></pre></td></tr></table></figure></p><p>使用命令行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin firim</span><br></pre></td></tr></table></figure></p><p>Fastfile文件内容(Fastfile内容不要用textEit去编辑, 用终端或者textsublime)<br>注意: 以下脚本想要运行需要xocde的info”Bundle version” 手动改为1.0, 而不是$(PRODUCT_BUNDLE_IDENTIFIER)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"># This file contains the fastlane.tools configuration</span><br><span class="line"># You can find the documentation at https://docs.fastlane.tools</span><br><span class="line">#</span><br><span class="line"># For a list of all available actions, check out</span><br><span class="line">#</span><br><span class="line">#     https://docs.fastlane.tools/actions</span><br><span class="line">#</span><br><span class="line"># For a list of all available plugins, check out</span><br><span class="line">#</span><br><span class="line">#     https://docs.fastlane.tools/plugins/available-plugins</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Uncomment the line if you want fastlane to automatically update itself</span><br><span class="line"># update_fastlane</span><br><span class="line"></span><br><span class="line">default_platform(:ios)</span><br><span class="line"># 自动更定bulid号 但是因为Jenkins也可以设置所以可用可不用</span><br><span class="line">def updateProjectBuildNumber</span><br><span class="line">    currentTime = Time.new.strftime(&quot;%Y%m%d&quot;)</span><br><span class="line">    build = get_build_number()</span><br><span class="line">    if build.include?&quot;#&#123;currentTime&#125;.&quot;</span><br><span class="line">    # =&gt; 为当天版本 计算迭代版本号</span><br><span class="line">    lastStr = build[build.length-2..build.length-1]</span><br><span class="line">    lastNum = lastStr.to_i</span><br><span class="line">    lastNum = lastNum + 1</span><br><span class="line">    lastStr = lastNum.to_s</span><br><span class="line">    if lastNum &lt; 10</span><br><span class="line">    lastStr = lastStr.insert(0,&quot;0&quot;)</span><br><span class="line">    end</span><br><span class="line">    build = &quot;#&#123;currentTime&#125;.#&#123;lastStr&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">    # =&gt; 非当天版本 build 号重置</span><br><span class="line">    build = &quot;#&#123;currentTime&#125;.01&quot;</span><br><span class="line">    end</span><br><span class="line">    puts(&quot;*************| 更新build #&#123;build&#125; |*************&quot;)</span><br><span class="line">    # =&gt; 更改项目 build 号</span><br><span class="line">    increment_build_number(</span><br><span class="line">    build_number: &quot;#&#123;build&#125;&quot;</span><br><span class="line">    )</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#指定项目的scheme名称</span><br><span class="line">scheme=“BirdieCameraDemo”</span><br><span class="line"></span><br><span class="line">platform :ios do</span><br><span class="line">  lane :development_build do|options|</span><br><span class="line">  branch = options[:branch]</span><br><span class="line"></span><br><span class="line">  puts “开始打development ipa”</span><br><span class="line"></span><br><span class="line">  updateProjectBuildNumber #更改项目build号</span><br><span class="line"></span><br><span class="line">  # 开始打包</span><br><span class="line">  #gym 括号里面的就是Fastlane的动作</span><br><span class="line">  gym(</span><br><span class="line">  #输出的ipa名称</span><br><span class="line">  output_name:”#&#123;scheme&#125;_#&#123;get_build_number()&#125;”,</span><br><span class="line">  # 是否清空以前的编译信息 true：是</span><br><span class="line">  clean:true,</span><br><span class="line">  # 指定打包方式，Release 或者 Debug</span><br><span class="line">  configuration:&quot;Release&quot;,</span><br><span class="line">  # 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development</span><br><span class="line">  export_method:&quot;development&quot;,</span><br><span class="line">  # 指定输出文件夹</span><br><span class="line">  output_directory:&quot;./fastlane/build&quot;,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  puts &quot;开始上传fir&quot;</span><br><span class="line">  # 开始上传fir</span><br><span class="line">  firim(firim_api_token: &quot;b86d85e22b89841941eda59b0385fc89&quot;) # token 在fir 上查看。</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="Jenkins环境搭建"><a href="#Jenkins环境搭建" class="headerlink" title="Jenkins环境搭建"></a>Jenkins环境搭建</h3><h6 id="本地jenkins环境搭建"><a href="#本地jenkins环境搭建" class="headerlink" title="本地jenkins环境搭建"></a>本地jenkins环境搭建</h6><p>Jenkins 是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p><p>1.点击 <a href="https://link.jianshu.com/?t=http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a> 下载最新的Jenkins.war</p><p>2.打开终端，进入war包所在目录，执行以下命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">java</span> <span class="selector-tag">-jar</span> <span class="selector-tag">jenkins</span><span class="selector-class">.war</span></span><br></pre></td></tr></table></figure><p>注意：Jenkins依赖于Java运行环境，因此需要首先安装JDK,下载地址：<a href="https://link.jianshu.com/?t=http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>3.执行完成之后打开浏览器输入<a href="https://link.jianshu.com/?t=http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>4.弹出Jenkins安装界面，会让你输入安全密码,输入完成之后选择默认安装。</p><p>5.新建管理员账号密码</p><p>对以上过程有疑问的话可以参考<a href="https://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="noopener">手把手教你利用Jenkins持续集成iOS项目</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>还是登录<a href="https://link.jianshu.com/?t=http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，选择系统管理 - 管理插件。</p><p>安装GitLab插件<br>在可选插件中选择GitLab Plugin和Gitlab Hook Plugin进行安装。</p><p>安装Xcode插件<br>在可选插件中选择Xcode integration进行安装。</p><p>安装完成之后，我们就可以配置构建项目了。</p><h4 id="构建任务"><a href="#构建任务" class="headerlink" title="构建任务"></a>构建任务</h4><p>1.点击新建，输入名称，构建一个自由风格的软件项目</p><p><img src="/images/autoRelease1.png" alt="&quot;image&quot;"></p><p>2.配置Git</p><p><img src="/images/autoRelease2.png" alt="&quot;image&quot;"></p><p>添加Git仓库地址，可以是HTTP也可以是SSH。点击Add</p><p>如果是HTTP</p><p><img src="/images/autoRelease3.png" alt="&quot;image&quot;"></p><p>如果是SSH</p><p><img src="/images/autoRelease4.png" alt="&quot;image&quot;"></p><p>3.配置脚本</p><p><img src="/images/autoRelease5.png" alt="&quot;image&quot;"></p><p>所以在执行fastlane development_build之前需要进入TestCI(项目/iOS)目录，即fastlane文件夹所在目录。</p><p>4.添加完成之后点击立即构建</p><p><img src="/images/autoRelease6.png" alt="&quot;image&quot;"></p><p>5.执行成功显示如下</p><p><img src="/images/autoRelease7.png" alt="&quot;image&quot;"></p><hr><p>自己项目里面的jenkins截图</p><p><img src="/images/autoRelease8.png" alt="&quot;image&quot;"></p><p><img src="/images/autoRelease9.png" alt="&quot;image&quot;"></p><p><img src="/images/autoRelease10.png" alt="&quot;image&quot;"></p><p><img src="/images/autoRelease11.png" alt="&quot;image&quot;"></p><p><img src="/images/autoRelease12.png" alt="&quot;image&quot;"></p><h5 id="jenkins-内部shell-自动打包脚本"><a href="#jenkins-内部shell-自动打包脚本" class="headerlink" title="jenkins 内部shell 自动打包脚本"></a>jenkins 内部shell 自动打包脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># git相关操作重置 / 清理</span><br><span class="line">git reset --hard</span><br><span class="line">git clean -f</span><br><span class="line"></span><br><span class="line"># 因为是rn项目 删除reactnative 相关文件夹 </span><br><span class="line">rm -rf node_modules &amp; rm -rf yarn.lock</span><br><span class="line">#重新更新reactnavite 内容</span><br><span class="line">yarn install  #cd--verbose</span><br><span class="line">cd ios #进入ios项目文件夹</span><br><span class="line"># 删除pod相关文件夹</span><br><span class="line">rm -rf pods &amp; rm -rf Podfile.lock</span><br><span class="line">#pod 项目</span><br><span class="line">pod install --verbose --no-repo-update</span><br><span class="line"># bundle用于运行fastlane中的Gemfile文件内容</span><br><span class="line">#fastlane 用于跑fastlane/Fastfile中的代码(同上已写) </span><br><span class="line">#development_build 方法是Fastfile中放出来的shell 方法名</span><br><span class="line">bundle install &amp;&amp; bundle exec fastlane development_build</span><br></pre></td></tr></table></figure><hr><h4 id="podfile有一句代码需要备注"><a href="#podfile有一句代码需要备注" class="headerlink" title="podfile有一句代码需要备注"></a>podfile有一句代码需要备注</h4><p><a href="https://www.jianshu.com/p/b8b889610b7e" target="_blank" rel="noopener">Podfile文件用法详解</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#便利修改pods文件中各个库的setting设置</span><br><span class="line">#post_install 安装前的设置操作</span><br><span class="line"> post_install do |installer|</span><br><span class="line">    installer.pods_project.targets.each do |target|</span><br><span class="line">      target.build_configurations.each do |config|</span><br><span class="line">          config.build_settings[&apos;CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER&apos;] = &apos;NO&apos;</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">  end</span><br></pre></td></tr></table></figure><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动打包&quot;&gt;&lt;a href=&quot;#自动打包&quot; class=&quot;headerlink&quot; title=&quot;自动打包&quot;&gt;&lt;/a&gt;自动打包&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jenkins.io&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
    
      <category term="自动化打包" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>怎么发布博客文章/图片视频添加</title>
    <link href="http://yoursite.com/2020/02/26/%E6%80%8E%E4%B9%88%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0:%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E6%B7%BB%E5%8A%A0/"/>
    <id>http://yoursite.com/2020/02/26/%E6%80%8E%E4%B9%88%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0:%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E6%B7%BB%E5%8A%A0/</id>
    <published>2020-02-26T07:21:04.000Z</published>
    <updated>2020-02-26T07:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="hexo环境搭建参考链接"><a href="#hexo环境搭建参考链接" class="headerlink" title="hexo环境搭建参考链接"></a>hexo环境搭建参考链接</h3><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">点击这里哈,谢谢人家</a></p><h3 id="cd-到-blog-source-目录"><a href="#cd-到-blog-source-目录" class="headerlink" title="cd 到 ../blog/source 目录"></a>cd 到 ../blog/source 目录</h3><h3 id="建一个新项目"><a href="#建一个新项目" class="headerlink" title="建一个新项目"></a>建一个新项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="跑本地服务"><a href="#跑本地服务" class="headerlink" title="跑本地服务"></a>跑本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="发布之前一定要先clean"><a href="#发布之前一定要先clean" class="headerlink" title="发布之前一定要先clean"></a>发布之前一定要先clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/1fb65c61fa4a" target="_blank" rel="noopener">hexo常用命令笔记</a></p><p><a href="http://blog.csdn.net/qq_26891045/article/details/51693571" target="_blank" rel="noopener">hexo博客添加图片，音乐，视频</a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="插入外部链接图片"><a href="#插入外部链接图片" class="headerlink" title="插入外部链接图片"></a>插入外部链接图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line">![“图片描述”](“图片地址”)</span><br></pre></td></tr></table></figure><h4 id="添加本地图片"><a href="#添加本地图片" class="headerlink" title="添加本地图片"></a>添加本地图片</h4><p>在\hexo\source目录下新建文件夹，命名为images或者其他你喜欢的名字，然后编辑你的md博文，插入下面的代码样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line">![“图片描述”](/images/你的图片名字.JPG)</span><br></pre></td></tr></table></figure><h4 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h4><p>比如网易云音乐，找到喜欢的歌曲，点击分享按钮，把里面的代码复制下来，直接粘贴到博文中即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86</span><br><span class="line">src=&quot;http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66&quot;&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h4 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line">Idina Menze和Caleb Hyles激情对唱Let It Go：</span><br><span class="line">&lt;iframe</span><br><span class="line">height=498 width=510</span><br><span class="line">src=&quot;http://player.youku.com/embed/XNjcyMDU4Njg0&quot;</span><br><span class="line">frameborder=0 allowfullscreen&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="hexo探索" scheme="http://yoursite.com/tags/hexo%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python探索</title>
    <link href="http://yoursite.com/2018/01/18/Python%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2018/01/18/Python%E6%8E%A2%E7%B4%A2/</id>
    <published>2018-01-18T07:50:33.000Z</published>
    <updated>2018-01-18T08:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python探索"><a href="#Python探索" class="headerlink" title="Python探索"></a>Python探索</h1><p>python语言探索开发:</p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址:"></a>参考网址:</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><a href="http://blog.sina.com.cn/s/blog_62d4d5900102v0c6.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_62d4d5900102v0c6.html</a></p><p>保存两个版本python:</p><p><a href="https://www.jianshu.com/p/51811fa24752/" target="_blank" rel="noopener">https://www.jianshu.com/p/51811fa24752/</a></p><h3 id="语言讲解"><a href="#语言讲解" class="headerlink" title="语言讲解"></a>语言讲解</h3><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316090478912dab2a3a9e8f4ed49d28854b292f85bb000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316090478912dab2a3a9e8f4ed49d28854b292f85bb000</a></p><p><a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-tutorial.html</a></p><h3 id="冲顶大会脚本地址"><a href="#冲顶大会脚本地址" class="headerlink" title="冲顶大会脚本地址"></a>冲顶大会脚本地址</h3><p><a href="https://github.com/steveyg/AnswerHelper" target="_blank" rel="noopener">https://github.com/steveyg/AnswerHelper</a></p><h2 id="探索小结"><a href="#探索小结" class="headerlink" title="探索小结"></a>探索小结</h2><h3 id="1-文本编辑器"><a href="#1-文本编辑器" class="headerlink" title="1.文本编辑器"></a>1.文本编辑器</h3><p>用文本编辑器写Python程序，然后保存为后缀为.py的文件，就可以用Python直接运行这个程序了。</p><p>Python的交互模式和直接运行.py文件有什么区别呢？</p><p>直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。</p><p>直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。</p><p>用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27’的超大显示器！</p><h3 id="2-输入输出"><a href="#2-输入输出" class="headerlink" title="2.输入输出"></a>2.输入输出</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。</p><p>输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。</p><p>input()和print()是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击“确定”后在网页上看到输出信息。</p><h3 id="3-数据类型与变量"><a href="#3-数据类型与变量" class="headerlink" title="3. 数据类型与变量"></a>3. 数据类型与变量</h3><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><p>注意：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。</p><p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p><h3 id="4-字符串预编码"><a href="#4-字符串预编码" class="headerlink" title="4.字符串预编码"></a>4.字符串预编码</h3><p>Python 3的字符串使用Unicode，直接支持多语言。</p><p>当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;中文&apos;.encode(&apos;gb2312&apos;)</span><br><span class="line">b&apos;\xd6\xd0\xce\xc4&apos;</span><br></pre></td></tr></table></figure></p><p>但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。</p><p>格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">s = &apos;Python-中文&apos;</span><br><span class="line">print(s)</span><br><span class="line">b = s.encode(&apos;utf-8&apos;)</span><br><span class="line">print(b)</span><br><span class="line">print(b.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure><h3 id="5-使用list和tuple"><a href="#5-使用list和tuple" class="headerlink" title="5.使用list和tuple"></a>5.使用list和tuple</h3><p>list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">classmates = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</span><br><span class="line">print(&apos;classmates =&apos;, classmates)</span><br><span class="line">print(&apos;len(classmates) =&apos;, len(classmates))</span><br><span class="line">print(&apos;classmates[0] =&apos;, classmates[0])</span><br><span class="line">print(&apos;classmates[1] =&apos;, classmates[1])</span><br><span class="line">print(&apos;classmates[2] =&apos;, classmates[2])</span><br><span class="line">print(&apos;classmates[-1] =&apos;, classmates[-1])</span><br><span class="line">classmates.pop()</span><br><span class="line">print(&apos;classmates =&apos;, classmates)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">classmates = (&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;)</span><br><span class="line">print(&apos;classmates =&apos;, classmates)</span><br><span class="line">print(&apos;len(classmates) =&apos;, len(classmates))</span><br><span class="line">print(&apos;classmates[0] =&apos;, classmates[0])</span><br><span class="line">print(&apos;classmates[1] =&apos;, classmates[1])</span><br><span class="line">print(&apos;classmates[2] =&apos;, classmates[2])</span><br><span class="line">print(&apos;classmates[-1] =&apos;, classmates[-1])</span><br><span class="line"></span><br><span class="line"># cannot modify tuple:</span><br><span class="line">classmates[0] = &apos;Adam&apos;</span><br></pre></td></tr></table></figure><h3 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6.条件判断"></a>6.条件判断</h3><p>条件判断可以让计算机自己做选择，Python的if…elif…else很灵活。</p><p>条件判断从上向下匹配，当满足条件时执行对应的块内语句，后续的elif和else都不再执行。</p><p>注意 : 条件判断的if条件下面逻辑实现代码要与if首字母位置间隔4个空格(TAB)</p><h3 id="7-循环"><a href="#7-循环" class="headerlink" title="7.循环"></a>7.循环</h3><p>循环是让计算机做重复任务的有效的方法。</p><p>break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。</p><p>要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。</p><p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用Ctrl+C退出程序，或者强制结束Python进程。</p><p>请试写一个死循环程序。</p><h3 id="8-使用dict和set"><a href="#8-使用dict和set" class="headerlink" title="8.使用dict和set"></a>8.使用dict和set</h3><p>使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。</p><p>tuple虽然是不变对象，但试试把(1, 2, 3)和(1, [2, 3])放入dict或set中，并解释结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#dict</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">d = &#123;</span><br><span class="line">&apos;Michael&apos;: 95,</span><br><span class="line">&apos;Bob&apos;: 75,</span><br><span class="line">&apos;Tracy&apos;: 85</span><br><span class="line">&#125;</span><br><span class="line">print(&apos;d[\&apos;Michael\&apos;] =&apos;, d[&apos;Michael&apos;])</span><br><span class="line">print(&apos;d[\&apos;Bob\&apos;] =&apos;, d[&apos;Bob&apos;])</span><br><span class="line">print(&apos;d[\&apos;Tracy\&apos;] =&apos;, d[&apos;Tracy&apos;])</span><br><span class="line">print(&apos;d.get(\&apos;Thomas\&apos;, -1) =&apos;, d.get(&apos;Thomas&apos;, -1))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#set</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">s1 = set([1, 1, 2, 2, 3, 3])</span><br><span class="line">print(s1)</span><br><span class="line">s2 = set([2, 3, 4])</span><br><span class="line">print(s1 &amp; s2)</span><br><span class="line">print(s1 | s2)</span><br></pre></td></tr></table></figure><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><p>调用Python的函数，需要根据函数定义，传入正确的参数。如果函数调用出错，一定要学会看错误信息，所以英文很重要！</p><p>定义函数时，需要确定函数名和参数个数；</p><p>如果有必要，可以先对参数的数据类型做检查；</p><p>函数体内部可以用return随时返回函数结果；</p><p>函数执行完毕也没有return语句时，自动return None。</p><p>函数可以同时返回多个值，但其实就是一个tuple。</p><p>参数:</p><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p><p>要注意定义可变参数和关键字参数的语法：</p><p>*args是可变参数，args接收的是一个tuple；</p><p>**kw是关键字参数，kw接收的是一个dict。</p><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><p>可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过<em>args传入：func(</em>(1, 2, 3))；</p><p>关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过<strong>kw传入：func(</strong>{‘a’: 1, ‘b’: 2})。</p><p>使用<em>args和*</em>kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># *var参数</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">def hello(greeting, *args):</span><br><span class="line">if (len(args)==0):</span><br><span class="line">print(&apos;%s!&apos; % greeting)</span><br><span class="line">else:</span><br><span class="line">print(&apos;%s, %s!&apos; % (greeting, &apos;, &apos;.join(args)))</span><br><span class="line"></span><br><span class="line">hello(&apos;Hi&apos;) # =&gt; greeting=&apos;Hi&apos;, args=()</span><br><span class="line">hello(&apos;Hi&apos;, &apos;Sarah&apos;) # =&gt; greeting=&apos;Hi&apos;, args=(&apos;Sarah&apos;)</span><br><span class="line">hello(&apos;Hello&apos;, &apos;Michael&apos;, &apos;Bob&apos;, &apos;Adam&apos;) # =&gt; greeting=&apos;Hello&apos;, args=(&apos;Michael&apos;, &apos;Bob&apos;, &apos;Adam&apos;)</span><br><span class="line"></span><br><span class="line">names = (&apos;Bart&apos;, &apos;Lisa&apos;)</span><br><span class="line">hello(&apos;Hello&apos;, *names) # =&gt; greeting=&apos;Hello&apos;, args=(&apos;Bart&apos;, &apos;Lisa&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># **kw参数</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">def print_scores(**kw):</span><br><span class="line">print(&apos;      Name  Score&apos;)</span><br><span class="line">print(&apos;------------------&apos;)</span><br><span class="line">for name, score in kw.items():</span><br><span class="line">print(&apos;%10s  %d&apos; % (name, score))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print_scores(Adam=99, Lisa=88, Bart=77)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">&apos;Adam Lee&apos;: 99,</span><br><span class="line">&apos;Lisa S&apos;: 88,</span><br><span class="line">&apos;F.Bart&apos;: 77</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_scores(**data)</span><br><span class="line"></span><br><span class="line">def print_info(name, *, gender, city=&apos;Beijing&apos;, age):</span><br><span class="line">print(&apos;Personal Info&apos;)</span><br><span class="line">print(&apos;---------------&apos;)</span><br><span class="line">print(&apos;   Name: %s&apos; % name)</span><br><span class="line">print(&apos; Gender: %s&apos; % gender)</span><br><span class="line">print(&apos;   City: %s&apos; % city)</span><br><span class="line">print(&apos;    Age: %s&apos; % age)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print_info(&apos;Bob&apos;, gender=&apos;male&apos;, age=20)</span><br><span class="line">print_info(&apos;Lisa&apos;, gender=&apos;female&apos;, city=&apos;Shanghai&apos;, age=18)</span><br></pre></td></tr></table></figure><p>递归函数</p><p>使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</p><p>针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。</p><p>Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"># 利用递归函数计算阶乘</span><br><span class="line"># N! = 1 * 2 * 3 * ... * N</span><br><span class="line">def fact(n):</span><br><span class="line">if n == 1:</span><br><span class="line">return 1</span><br><span class="line">return n * fact(n-1)</span><br><span class="line"></span><br><span class="line">print(&apos;fact(1) =&apos;, fact(1))</span><br><span class="line">print(&apos;fact(5) =&apos;, fact(5))</span><br><span class="line">print(&apos;fact(10) =&apos;, fact(10))</span><br><span class="line"></span><br><span class="line"># 利用递归函数移动汉诺塔:</span><br><span class="line">def move(n, a, b, c):</span><br><span class="line">if n == 1:</span><br><span class="line">print(&apos;move&apos;, a, &apos;--&gt;&apos;, c)</span><br><span class="line">else:</span><br><span class="line">move(n-1, a, c, b)</span><br><span class="line">move(1, a, b, c)</span><br><span class="line">move(n-1, b, a, c)</span><br><span class="line"></span><br><span class="line">move(4, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)</span><br></pre></td></tr></table></figure><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python探索&quot;&gt;&lt;a href=&quot;#Python探索&quot; class=&quot;headerlink&quot; title=&quot;Python探索&quot;&gt;&lt;/a&gt;Python探索&lt;/h1&gt;&lt;p&gt;python语言探索开发:&lt;/p&gt;
&lt;h2 id=&quot;参考网址&quot;&gt;&lt;a href=&quot;#参考网址
      
    
    </summary>
    
    
    
      <category term="python开发" scheme="http://yoursite.com/tags/python%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ipa包重签名/替换ipa内文件</title>
    <link href="http://yoursite.com/2018/01/17/ipa%E5%8C%85%E9%87%8D%E7%AD%BE%E5%90%8D-%E6%9B%BF%E6%8D%A2ipa%E5%86%85%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/17/ipa%E5%8C%85%E9%87%8D%E7%AD%BE%E5%90%8D-%E6%9B%BF%E6%8D%A2ipa%E5%86%85%E6%96%87%E4%BB%B6/</id>
    <published>2018-01-17T03:20:06.000Z</published>
    <updated>2018-01-17T06:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ipa包重签名-替换ipa内文件"><a href="#ipa包重签名-替换ipa内文件" class="headerlink" title="ipa包重签名/替换ipa内文件"></a>ipa包重签名/替换ipa内文件</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、unzip demo.ipa</span><br><span class="line">2、rm -rf Payload/demo.app/_CodeSignature</span><br><span class="line">3、rm -rf Payload/demo.app/Frameworks/ChuShouTVSDK.framework/_CodeSignature</span><br><span class="line">4、cp your.mobileprovision Payload/demo.app/embedded.mobileprovision</span><br><span class="line">5、codesign -f -s &quot;your identity&quot; --entitlements Entitlements.plist Payload/demo.app/Frameworks/ChuShouTVSDK.framework</span><br><span class="line">6、codesign -f -s &quot;your identity&quot; --entitlements Entitlements.plist Payload/demo.app</span><br><span class="line">7、zip -r demo.ipa Payload Symbols</span><br></pre></td></tr></table></figure><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在重签名之前要做一些准备工作。<br>　　<br>1.首先要下载并安装Xcode，里面有个codesign_allocate程序，在安装时/usr/bin中会多一个codesign的程序，该程序用于ipa包的签名。<br>　　<br>2.企业证书的Certificate文件，私钥文件，Provisioning Profile文件等。注意企业证书一定要是iOS Distribution的类型，不能是iOS Development。　　　</p><h2 id="重签名步骤"><a href="#重签名步骤" class="headerlink" title="重签名步骤"></a>重签名步骤</h2><p>　　</p><h3 id="1-解压ipa"><a href="#1-解压ipa" class="headerlink" title="1.解压ipa"></a>1.解压ipa</h3><p>解压ipa得到Payload/[App name].bundle，打开bundle。　　</p><h3 id="2-删除旧的ipa签名信息"><a href="#2-删除旧的ipa签名信息" class="headerlink" title="2.删除旧的ipa签名信息"></a>2.删除旧的ipa签名信息</h3><p>　　<br>删除bundle中的_CodeSignature文件夹，也就是删除之前ipa的签名信息。　　</p><h3 id="3-更换证书"><a href="#3-更换证书" class="headerlink" title="3.更换证书"></a>3.更换证书</h3><p>　　<br>将bundle中旧的Provisioning Profile删除，用我们自己的企业证书的Provisioning Profile替代。　　</p><h3 id="注意，要将ipa包中我们的企业证书改名为embedded-mobileprovision。"><a href="#注意，要将ipa包中我们的企业证书改名为embedded-mobileprovision。" class="headerlink" title="注意，要将ipa包中我们的企业证书改名为embedded.mobileprovision。"></a>注意，要将ipa包中我们的企业证书改名为embedded.mobileprovision。</h3><p>　　</p><h3 id="4-修改bundle内容"><a href="#4-修改bundle内容" class="headerlink" title="4.修改bundle内容"></a>4.修改bundle内容</h3><p>　　<br>此时我们可以尽情地修改bundle中的内容，例如添加一个动态库，删除一张图片等。<br>　　<br>注意：如果要往bundle中添加动态库，必须要先将其压缩成zip文件，在程序启动时将其解压到Documents目录下再dlopen，否则程序在启动时加载动态库文件会卡死在那里。　　</p><h3 id="5-重新签名"><a href="#5-重新签名" class="headerlink" title="5.重新签名"></a>5.重新签名</h3><p>　　<br>在完成bundle内容的修改后，需要通过/usr/bin/codesign程序重新签名，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/codesign -f -s &quot;iPhone Distribution: YourCompanyName&quot; --resource-rules Payload/ MYAPP.app/ResourceRules.plist Payload/ MYAPP.app</span><br></pre></td></tr></table></figure><p>其中iPhone Distribution可以从钥匙串访问中获取，就是企业证书的名字，例如下面的”iPhone Distribution:XXXXXXXXXX”：</p><p><img src="/images/ipaSignAgain.png" alt="&quot;image&quot;">　　</p><h3 id="具体的命令示例："><a href="#具体的命令示例：" class="headerlink" title="具体的命令示例："></a>具体的命令示例：</h3><p>　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -f -s &quot;iPhone Developer: XXXXXXXXXX&quot; --resource-rules Payload/NdCP_Game_Demo.app/ResourceRules.plist Payload/NdCP_Game_Demo.app</span><br></pre></td></tr></table></figure></p><p>这条命令的意思是：使用keychain中”iPhone Developer: XXXXXXXXXX”标识的证书，根据Payload/NdCP_Game_Demo.app/ResourceRules.plist文件中的规则进行签名，如果ipa包中已经存在签名，那么将被替换，该过程生成的_CodeSignature目录将存放在Payload/NdCP_Game_Demo.app目录下。</p><p>在命令执行后，在bundle中会生成一个新的_CodeSignature目录，里面包含了新的签名信息。　　</p><h3 id="6-重新打包成ipa"><a href="#6-重新打包成ipa" class="headerlink" title="6.重新打包成ipa"></a>6.重新打包成ipa</h3><p>　　<br>在完成上述工作后，可以生成新的ipa进行发布。示例命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip -r ResignTest.ipa Payload</span><br><span class="line"></span><br><span class="line"># 注意Payload后面不能有“/”</span><br></pre></td></tr></table></figure><h3 id="7-发布"><a href="#7-发布" class="headerlink" title="7.发布"></a>7.发布</h3><p>　经过打包发布测试，得出结论：对修改了ipa包内容和其中的签名后，重签名的ipa文件可以在非越狱设备和越狱设备上成功安装。注意，是通过带有SSL证书的网站和Apple系统安装的（企业内部分发程序），不是通过PP助手那样的第三方工具安装的。　</p><h3 id="8-步骤总结"><a href="#8-步骤总结" class="headerlink" title="8.步骤总结"></a>8.步骤总结</h3><p>作为一个app应用程序开发者，在app应用程序在苹果商店上架前总需要将安装包安装到ios机器上进行测试，这个时候我们就需要打包in house版本的ipa了，打包in house实际上是一个将ipa应用程序重新签名的一个过程。一般来说打包in house需要以下东西:MAC机器，一般打包ipa都是在MAC机上打包的，一个后缀名为.mobileprovision概要配置文件,一个后缀名为P12的证书，还有一个后缀名为.cer的证书，还有就是你想重新签名的ipa.</p><p>如何给ipa重新签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">步骤1 :</span><br><span class="line">unzip YourApp.ipa</span><br><span class="line">步骤2:</span><br><span class="line">rm -rf Payload/YourApp.app/_CodeSignature</span><br><span class="line">步骤3:</span><br><span class="line">cp InHouse.mobileprovision Payload/YourApp.app/embedded.mobileprovision</span><br><span class="line">步骤4:</span><br><span class="line">/usr/bin/codesign -f -s &quot;iPhone Distribution: YourCompanyName&quot; --resource-rules Payload/YourApp.app/ResourceRules.plist Payload/YourApp.app</span><br><span class="line">步骤5:</span><br><span class="line">zip -r YourApp_inhouse.ipa Payload</span><br><span class="line"></span><br><span class="line">* InHouse.mobileprovision 是你要用来签名的provision文件</span><br><span class="line">* iPhone Distribution: YourCompanyName 是指该签名对应的证书的名字。这个可以在keychain中找到</span><br></pre></td></tr></table></figure><h2 id="文档参考"><a href="#文档参考" class="headerlink" title="文档参考"></a>文档参考</h2><p><a href="http://www.olinone.com/?p=198" target="_blank" rel="noopener">http://www.olinone.com/?p=198</a></p><h1 id="iOS逆向工程-简单利用”dumpdecrypted”给ipa砸壳"><a href="#iOS逆向工程-简单利用”dumpdecrypted”给ipa砸壳" class="headerlink" title="iOS逆向工程(简单利用”dumpdecrypted”给ipa砸壳)"></a>iOS逆向工程(简单利用”dumpdecrypted”给ipa砸壳)</h1><p><a href="https://www.jianshu.com/p/a4373b5feca0" target="_blank" rel="noopener">https://www.jianshu.com/p/a4373b5feca0</a></p><p>　　　　　　　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ipa包重签名-替换ipa内文件&quot;&gt;&lt;a href=&quot;#ipa包重签名-替换ipa内文件&quot; class=&quot;headerlink&quot; title=&quot;ipa包重签名/替换ipa内文件&quot;&gt;&lt;/a&gt;ipa包重签名/替换ipa内文件&lt;/h1&gt;&lt;h2 id=&quot;基本步骤&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android ANR 分析研究</title>
    <link href="http://yoursite.com/2018/01/16/Android-ANR-%E5%88%86%E6%9E%90%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/01/16/Android-ANR-%E5%88%86%E6%9E%90%E7%A0%94%E7%A9%B6/</id>
    <published>2018-01-16T06:56:00.000Z</published>
    <updated>2018-01-16T12:18:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-ANR-分析研究"><a href="#Android-ANR-分析研究" class="headerlink" title="Android ANR 分析研究"></a>Android ANR 分析研究</h1><p>参考文档 : <a href="https://www.jianshu.com/p/6d855e984b99" target="_blank" rel="noopener">https://www.jianshu.com/p/6d855e984b99</a></p><p>   <a href="http://blog.csdn.net/dadoneo/article/details/8270107/" target="_blank" rel="noopener">http://blog.csdn.net/dadoneo/article/details/8270107/</a></p><p>   <a href="http://blog.csdn.net/itachi85/article/details/6918761" target="_blank" rel="noopener">http://blog.csdn.net/itachi85/article/details/6918761</a></p><p>   <a href="https://www.jianshu.com/p/8964812972be" target="_blank" rel="noopener">https://www.jianshu.com/p/8964812972be</a></p><h2 id="什么是anr"><a href="#什么是anr" class="headerlink" title="什么是anr"></a>什么是anr</h2><p>ANR全名Application Not Responding, 也就是”应用无响应”. 当操作在一段时间内系统无法处理时, 系统层面会弹出上图那样的ANR对话框.</p><p>ANR一般有三种类型：</p><p>1：KeyDispatchTimeout(5 seconds) –主要类型<br>按键或触摸事件在特定时间内无响应</p><p>2：BroadcastTimeout(10 seconds)<br>BroadcastReceiver在特定时间内无法处理完成</p><p>3：ServiceTimeout(20 seconds) –小概率类型<br>Service在特定的时间内无法处理完成</p><h2 id="anr是怎么产生的"><a href="#anr是怎么产生的" class="headerlink" title="anr是怎么产生的"></a>anr是怎么产生的</h2><p>在Android里, App的响应能力是由Activity Manager和Window Manager系统服务来监控的. 通常在如下两种情况下会弹出ANR对话框:</p><p>5s内无法响应用户输入事件(例如键盘输入, 触摸屏幕等).</p><p>BroadcastReceiver在10s内无法结束.</p><p> 造成以上两种情况的首要原因就是在主线程(UI线程)里面做了太多的阻塞耗时操作, 例如文件读写, 数据库读写, 网络查询等等.</p><h2 id="怎么避免anr的产生"><a href="#怎么避免anr的产生" class="headerlink" title="怎么避免anr的产生"></a>怎么避免anr的产生</h2><p>根据上一条的造成anr的主要原因给出相应的对策,那就是 尽量减少在主线程里面做太多的阻塞耗时的操作.</p><h2 id="anr-log-日志分析"><a href="#anr-log-日志分析" class="headerlink" title="anr log 日志分析"></a>anr log 日志分析</h2><p>在BottomBarManager里， 当点击find_in_page button时， sleep 10秒，模拟一个ANR。</p><p>用”ActivityManager”作为filter tag， 可以得到下面的信息。(btw, ultraedit有个filter 字符串的功能非常好， 看看linux下有没有类似的功能?)</p><p>可以得到ANR发生在哪个进程， reason， 在ANR发生前一段时间和发生后的一段时间， CPU占用率的统计信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">06-02 11:39:42.260      743-943/? E/ActivityManager﹕ ANR in com.qihoo.browser (com.qihoo.browser/org.chromium.</span><br><span class="line">chrome.browser.ChromeTabbedActivity)</span><br><span class="line">Reason: keyDispatchingTimedOut</span><br><span class="line">//CPU前一分钟、五分钟、十五分钟的CPU平均负载,</span><br><span class="line">//CPU平均负载可以理解为一段时间内正在使用和等待使用CPU的活动进程的平均数量。</span><br><span class="line">Load: 5.16 / 9.69 / 30.66</span><br><span class="line">//请注意ago，表示ANR发生之前的一段时间内的CPU使用率，并不是某一时刻的值</span><br><span class="line">CPU usage from 34388ms to -1ms ago:</span><br><span class="line">4.1% 32614/com.qihoo.browser: 2.5% user + 1.6% kernel / faults: 465 minor 1 major</span><br><span class="line">3% 379/adbd: 0.2% user + 2.8% kernel / faults: 1653 minor</span><br><span class="line">2.6% 743/system_server: 1.8% user + 0.7% kernel / faults: 689 minor</span><br><span class="line">2.5% 2326/com.qihoo.daemon: 2.2% user + 0.2% kernel / faults: 601 minor</span><br><span class="line">2.4% 1009/RX_Thread: 0% user + 2.4% kernel</span><br><span class="line">2% 280/surfaceflinger: 1.2% user + 0.8% kernel / faults: 1361 minor</span><br><span class="line">1.8% 2675/com.lbe.security:service: 1.7% user + 0.1% kernel / faults: 749 minor</span><br><span class="line">1.1% 1768/mpdecision: 0.1% user + 1% kernel</span><br><span class="line">0.9% 29165/kworker/0:2: 0% user + 0.9% kernel</span><br><span class="line">0.7% 23576/com.qihoo.appstore: 0.5% user + 0.1% kernel / faults: 1401 minor</span><br><span class="line">0.5% 28500/kworker/0:0: 0% user + 0.5% kernel</span><br><span class="line">0.4% 1055/com.android.systemui: 0.3% user + 0% kernel / faults: 48 minor</span><br><span class="line">0.4% 6850/kworker/u:1: 0% user + 0.4% kernel</span><br><span class="line">0.3% 23077/com.qihoo.appstore:PluginP01: 0.2% user + 0.1% kernel / faults: 200 minor</span><br><span class="line">0.2% 271/mediaserver: 0.2% user + 0% kernel / faults: 46 minor</span><br><span class="line">0.3% 6883/kworker/u:37: 0% user + 0.3% kernel</span><br><span class="line">0.2% 302/illumination_service: 0% user + 0.2% kernel</span><br><span class="line">0.2% 134/mmcqd/0: 0% user + 0.2% kernel</span><br><span class="line">0.1% 32727/com.qihoo.browser:privileged_process0: 0% user + 0% kernel / faults: 288 minor</span><br><span class="line">0.1% 2885/com.qihoo.browser:sandboxed_process1: 0% user + 0% kernel</span><br><span class="line">0.1% 3378/com.sonyericsson.playnowchina.android: 0.1% user + 0% kernel</span><br><span class="line">0.1% 2027/com.cleanmaster.mguard_cn:service: 0% user + 0.1% kernel / faults: 3 minor</span><br><span class="line">0.1% 1008/TX_Thread: 0% user + 0.1% kernel</span><br><span class="line">0.1% 28341/com.sonyericsson.dlna: 0.1% user + 0% kernel</span><br><span class="line">0% 130/cfinteractive: 0% user + 0% kernel</span><br><span class="line">0% 293/ric: 0% user + 0% kernel / faults: 93 minor</span><br><span class="line">0% 2468/com.qihoo360.mobilesafe.clean: 0% user + 0% kernel / faults: 45 minor</span><br><span class="line">0% 4861/com.tencent.mm: 0% user + 0% kernel / faults: 9 minor</span><br><span class="line">0% 127/irq/294-clearpa: 0% user + 0% kernel</span><br><span class="line">0% 281/zygote: 0% user + 0% kernel / faults: 129 minor</span><br><span class="line">0% 1007/MC_Thread: 0% user + 0% kernel</span><br><span class="line">0% 2648/com.qihoo.appstore_CoreDaemon: 0% user + 0% kernel</span><br><span class="line">0% 29640/com.lbe.security: 0% user + 0% kernel / faults: 1 minor</span><br><span class="line">0% 155/jbd2/mmcblk0p26: 0% user + 0% kernel</span><br><span class="line">0% 170/flush-179:0: 0% user + 0% kernel</span><br><span class="line">0% 269/servicemanager: 0% user + 0% kernel</span><br><span class="line">0% 276/system_monitor: 0% user + 0% kernel</span><br><span class="line">0% 291/qrngd: 0% user + 0% kernel</span><br><span class="line">0% 365/sdcard: 0% user + 0% kernel</span><br><span class="line">0% 1041/wpa_supplicant: 0% user + 0% kernel</span><br><span class="line">0% 1360/com.android.nfc: 0% user + 0% kernel</span><br><span class="line">0% 2958/lbesec.loader: 0% user + 0% kernel / faults: 14 minor</span><br><span class="line">0% 5128/com.tencent.mm:push: 0% user + 0% kernel / faults: 2 minor</span><br><span class="line">0% 6028/com.UCMobile:SearchBackgroundProcess: 0% user + 0% kernel</span><br><span class="line">+0% 3318/com.sonyericsson.textinput.chinese: 0% user + 0% kernel</span><br><span class="line">+0% 3544/sh: 0% user + 0% kernel</span><br><span class="line">+0% 3546/logcat: 0% user + 0% kernel</span><br><span class="line">+0% 3682/migration/1: 0% user + 0% kernel</span><br><span class="line">+0% 3683/kworker/1:0: 0% user + 0% kernel</span><br><span class="line">+0% 3684/ksoftirqd/1: 0% user + 0% kernel</span><br><span class="line">9.7% TOTAL: 4.8% user + 4.2% kernel + 0.3% iowait + 0.3% softirq</span><br><span class="line">//这里是later，表示ANR发生之后</span><br><span class="line">CPU usage from 1656ms to 2187ms later:</span><br><span class="line">8.7% 743/system_server: 0% user + 8.7% kernel / faults: 4 minor</span><br><span class="line">7% 943/InputDispatcher: 0% user + 7% kernel</span><br><span class="line">1.7% 1199/Binder_6: 0% user + 1.7% kernel</span><br><span class="line">5.2% 379/adbd: 0% user + 5.2% kernel / faults: 27 minor</span><br><span class="line">3.5% 379/adbd: 0% user + 3.5% kernel</span><br><span class="line">1.7% 1009/RX_Thread: 0% user + 1.7% kernel</span><br><span class="line">1.7% 1768/mpdecision: 0% user + 1.7% kernel</span><br><span class="line">1.7% 1784/mpdecision: 0% user + 1.7% kernel</span><br><span class="line">1.2% 6883/kworker/u:37: 0% user + 1.2% kernel</span><br><span class="line">1.3% 29165/kworker/0:2: 0% user + 1.3% kernel</span><br><span class="line">2.3% TOTAL: 0.1% user + 0.3% kernel + 1.8% iowait</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">06-02 12:00:15.753      743-825/? I/ActivityManager﹕ Killing ProcessRecord&#123;4190b0d8 11880:com.qihoo.browser/u0a10192&#125;: user&apos;s request</span><br><span class="line">06-02 12:00:15.813     743-1332/? I/ActivityManager﹕ Process com.qihoo.browser (pid 11880) has died.</span><br></pre></td></tr></table></figure><p>用”Proces”作为filter tag，可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//向浏览器进程(11880)发送signal3， 也就是SIGNAL_QUIT.</span><br><span class="line">06-02 12:00:10.889      743-943/? I/Process﹕ Sending signal. PID: 11880 SIG: 3</span><br></pre></td></tr></table></figure><p>用”dalvikvm”作为filter tag，可以看到<br>com.qihoo.browser进程处理SIGNAL_QUIT signal, 并把anr信息写入traces.txt文件.<br>进程的虚拟机实例接收到SIGNAL_QUIT信号后会由”Signal Catcher”线程将进程中各个线程的函数堆栈信息输出到traces.txt文件中.<br>值得注意的是， 当前运行的其他进程也会把当前的函数堆栈信息输出到traces.txt文件中, 但发生ANR的进程正常情况下会第一个输出，所以一般情况下我们只看traces.txt的开头就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">06-02 11:51:31.252    8857-8862/com.qihoo.browser I/dalvikvm﹕ threadid=3: reacting to signal 3</span><br><span class="line">06-02 11:51:31.422    8857-8862/com.qihoo.browser I/dalvikvm﹕ Wrote stack traces to &apos;/data/anr/traces.txt&apos;</span><br><span class="line">06-02 11:51:31.422      743-748/? I/dalvikvm﹕ threadid=3: reacting to signal 3</span><br><span class="line">06-02 11:51:32.243    1275-1280/? I/dalvikvm﹕ Wrote stack traces to &apos;/data/anr/traces.txt&apos;</span><br><span class="line">06-02 11:51:32.253    1282-1287/? I/dalvikvm﹕ threadid=3: reacting to signal 3</span><br><span class="line">06-02 11:51:32.283    1282-1287/? I/dalvikvm﹕ Wrote stack traces to &apos;/data/anr/traces.txt&apos;</span><br><span class="line">06-02 11:51:32.283    1348-1353/? I/dalvikvm﹕ threadid=3: reacting to signal 3</span><br><span class="line">06-02 11:51:32.283    1360-1365/? I/dalvikvm﹕ Wrote stack traces to &apos;/data/anr/traces.txt&apos;</span><br></pre></td></tr></table></figure><p>从以上的分析能够知道， 发生ANR时Android为我们提供了两种“利器”：traces文件和CPU使用率。</p><h3 id="分析CPU负载和CPU使用率"><a href="#分析CPU负载和CPU使用率" class="headerlink" title="分析CPU负载和CPU使用率"></a>分析CPU负载和CPU使用率</h3><p>这部分讲的还不是很清楚， 就先不做总结了， 以后有需要再系统的学习这小节.</p><p>从traces.txt分析</p><p>只需要看开头，每次发生ANR， 这个文件都会被清空，写入新的内容. 如果想查看以前发生ANR的信息， 可以去查看DB文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">----- pid 11880 at 2016-06-02 12:00:10 -----</span><br><span class="line">Cmd line: com.qihoo.browser</span><br><span class="line"></span><br><span class="line">DALVIK THREADS:</span><br><span class="line">(mutexes: tll=0 tsl=0 tscl=0 ghl=0)</span><br><span class="line"></span><br><span class="line">&quot;main&quot; prio=5 tid=1 TIMED_WAIT</span><br><span class="line">| group=&quot;main&quot; sCount=1 dsCount=0 obj=0x41458b50 self=0x414481f0</span><br><span class="line">| sysTid=11880 nice=-6 sched=0/0 cgrp=apps handle=1075152348</span><br><span class="line">| state=S schedstat=( 8455108583 3379699755 13157 ) utm=664 stm=181 core=0</span><br><span class="line">at java.lang.VMThread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:1031)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:1013)</span><br><span class="line">at com.qihoo.browser.BottomBarManager.handlePopupMenuAction(BottomBarManager.java:1220)</span><br><span class="line">at com.qihoo.browser.BottomBarManager.actionPerformed(BottomBarManager.java:629)</span><br><span class="line">at com.qihoo.browser.view.PopupMenu.onClick(PopupMenu.java:514)</span><br><span class="line">at android.view.View.performClick(View.java:4278)</span><br><span class="line">at android.view.View$PerformClick.run(View.java:17430)</span><br><span class="line">at android.os.Handler.handleCallback(Handler.java:725)</span><br><span class="line">at android.os.Handler.dispatchMessage(Handler.java:92)</span><br><span class="line">at android.os.Looper.loop(Looper.java:213)</span><br><span class="line">at android.app.ActivityThread.main(ActivityThread.java:5092)</span><br><span class="line">at java.lang.reflect.Method.invokeNative(Native Method)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:511)</span><br><span class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:797)</span><br><span class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:564)</span><br><span class="line">at dalvik.system.NativeStart.main(Native Method)</span><br><span class="line"></span><br><span class="line">&quot;pool-9-thread-1&quot; prio=5 tid=52 WAIT</span><br><span class="line">| group=&quot;main&quot; sCount=1 dsCount=0 obj=0x41e3a6b8 self=0x7ce144e0</span><br><span class="line">| sysTid=12261 nice=0 sched=0/0 cgrp=apps handle=2008331720</span><br><span class="line">| state=S schedstat=( 37597659 95306395 149 ) utm=2 stm=1 core=1</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">- waiting on &lt;0x41e3a7e0&gt; (a java.lang.VMThread) held by tid=52 (pool-9-thread-1)</span><br><span class="line">at java.lang.Thread.parkFor(Thread.java:1231)</span><br><span class="line">at sun.misc.Unsafe.park(Unsafe.java:323)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:159)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2019)</span><br><span class="line">at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:413)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1013)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1073)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)</span><br><span class="line">at java.lang.Thread.run(Thread.java:856)</span><br><span class="line"></span><br><span class="line">//“Signal Catcher”负责接收和处理kernel发送的各种信号，例如SIGNAL_QUIT、SIGNAL_USR1等就是被该线程</span><br><span class="line">//接收到并处理的，traces.txt 文件中的内容就是由该线程负责输出的，可以看到它的状态是RUNNABLE.</span><br><span class="line">&quot;Signal Catcher&quot; daemon prio=5 tid=3 RUNNABLE</span><br><span class="line">| group=&quot;system&quot; sCount=0 dsCount=0 obj=0x41735a58 self=0x6256b008</span><br><span class="line">| sysTid=11885 nice=0 sched=0/0 cgrp=apps handle=1074396464</span><br><span class="line">| state=R schedstat=( 41015624 121002197 61 ) utm=1 stm=3 core=0</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line">//JDWP线程是支持虚拟机调试的线程，不需要关心</span><br><span class="line">&quot;JDWP&quot; daemon prio=5 tid=4 VMWAIT</span><br><span class="line">| group=&quot;system&quot; sCount=1 dsCount=0 obj=0x41735b50 self=0x72d47008</span><br><span class="line">| sysTid=11886 nice=0 sched=0/0 cgrp=apps handle=1074396224</span><br><span class="line">| state=S schedstat=( 3051760 9521482 15 ) utm=0 stm=0 core=1</span><br><span class="line">#00  pc 000171ec  /system/lib/libc.so (select+20)</span><br><span class="line">#01  pc 00062faf  /system/lib/libdvm.so</span><br><span class="line">#02  pc 00065b41  /system/lib/libdvm.so</span><br><span class="line">#03  pc 0005637b  /system/lib/libdvm.so</span><br><span class="line">#04  pc 0000e4b8  /system/lib/libc.so (__thread_entry+72)</span><br><span class="line">#05  pc 0000dba4  /system/lib/libc.so (pthread_create+160)</span><br><span class="line">at dalvik.system.NativeStart.run(Native Method)</span><br></pre></td></tr></table></figure><h3 id="线程有很多状态，了解这些状态的意义对分析ANR的原因是有帮助的"><a href="#线程有很多状态，了解这些状态的意义对分析ANR的原因是有帮助的" class="headerlink" title="线程有很多状态，了解这些状态的意义对分析ANR的原因是有帮助的."></a>线程有很多状态，了解这些状态的意义对分析ANR的原因是有帮助的.</h3><p><img src="/images/androidanrimage.png" alt="&quot;image&quot;"></p><h2 id="DropBox中的log"><a href="#DropBox中的log" class="headerlink" title="DropBox中的log"></a>DropBox中的log</h2><p>traces.txt只保留最后一次发生ANR时的信息, android 2.2开始增加了DropBox功能, 保留历史上发生的所有ANR的log.<br>“/data/system/dropbox”是DB指定的文件存放位置.<br>日志保存的最长时间， 默认是3天.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@android:/data/system/dropbox # ls</span><br><span class="line">SYSTEM_BOOT@1464834107910.txt</span><br><span class="line">SYSTEM_TOMBSTONE@1464595870188.txt.gz</span><br><span class="line">SYSTEM_TOMBSTONE@1464835783944.txt.gz</span><br><span class="line">data_app_anr@1464666793921.txt.gz</span><br><span class="line">data_app_anr@1464838359233.txt.gz</span><br><span class="line">data_app_anr@1464838782715.txt.gz</span><br><span class="line">data_app_anr@1464839493673.txt.gz</span><br><span class="line">data_app_anr@1464840013776.txt.gz</span><br><span class="line">system_app_anr@1464838619773.txt.gz</span><br><span class="line">system_app_anr@1464838693689.txt.gz</span><br><span class="line">system_app_anr@1464838742647.txt.gz</span><br><span class="line">root@android:/data/system/dropbox #</span><br></pre></td></tr></table></figure><p>SystemServer在启动时， 会创建并添加DROPBOX_SERVICE.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//SystemServer.java</span><br><span class="line">private void startOtherServices() &#123;</span><br><span class="line">... ...</span><br><span class="line">try &#123;</span><br><span class="line">Slog.i(TAG, &quot;DropBox Service&quot;);</span><br><span class="line">ServiceManager.addService(Context.DROPBOX_SERVICE,</span><br><span class="line">new DropBoxManagerService(context, new File(&quot;/data/system/dropbox&quot;)));</span><br><span class="line">&#125; catch (Throwable e) &#123;</span><br><span class="line">reportWtf(&quot;starting DropBoxManagerService&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="framework是如何输出ANR信息到traces-txt文件中去的"><a href="#framework是如何输出ANR信息到traces-txt文件中去的" class="headerlink" title="framework是如何输出ANR信息到traces.txt文件中去的"></a>framework是如何输出ANR信息到traces.txt文件中去的</h2><p>ActivityManagerService.java中的appNotResponding()方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">final void appNotResponding(ProcessRecord app, ActivityRecord activity,</span><br><span class="line">ActivityRecord parent, boolean aboveSystem, final String annotation) &#123;</span><br><span class="line"></span><br><span class="line">//firstPids和lastPids两个集合存放那些将会在traces中输出信息的进程的进程号</span><br><span class="line">ArrayList&lt;Integer&gt; firstPids = new ArrayList&lt;Integer&gt;(5);</span><br><span class="line">SparseArray&lt;Boolean&gt; lastPids = new SparseArray&lt;Boolean&gt;(20);</span><br><span class="line"></span><br><span class="line">//mController是IActivityController接口的实例，是为Monkey测试程序预留的，默认为null</span><br><span class="line">if (mController != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 0 == continue, -1 = kill process immediately</span><br><span class="line">int res = mController.appEarlyNotResponding(app.processName, app.pid, annotation);</span><br><span class="line">if (res &lt; 0 &amp;&amp; app.pid != MY_PID) &#123;</span><br><span class="line">app.kill(&quot;anr&quot;, true);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (RemoteException e) &#123;</span><br><span class="line">mController = null;</span><br><span class="line">Watchdog.getInstance().setActivityController(null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long anrTime = SystemClock.uptimeMillis();</span><br><span class="line">if (MONITOR_CPU_USAGE) &#123;</span><br><span class="line">updateCpuStatsNow(); //更新CPU使用率</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">synchronized (this) &#123;</span><br><span class="line">//一些特定条件下会忽略ANR</span><br><span class="line">// PowerManager.reboot() can block for a long time, so ignore ANRs while shutting down.</span><br><span class="line">if (mShuttingDown) &#123;</span><br><span class="line">Slog.i(TAG, &quot;During shutdown skipping ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">return;</span><br><span class="line">&#125; else if (app.notResponding) &#123;</span><br><span class="line">Slog.i(TAG, &quot;Skipping duplicate ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">return;</span><br><span class="line">&#125; else if (app.crashing) &#123;</span><br><span class="line">Slog.i(TAG, &quot;Crashing app skipping ANR: &quot; + app + &quot; &quot; + annotation);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// In case we come through here for the same app before completing</span><br><span class="line">// this one, mark as anring now so we will bail out.</span><br><span class="line">app.notResponding = true;</span><br><span class="line"></span><br><span class="line">// Log the ANR to the event log.</span><br><span class="line">EventLog.writeEvent(EventLogTags.AM_ANR, app.userId, app.pid,</span><br><span class="line">app.processName, app.info.flags, annotation);</span><br><span class="line"></span><br><span class="line">//当前发生ANR的应用进程被第一个添加进firstPids集合中.</span><br><span class="line">//所以会第一个向traces文件中写入信息。反过来说，traces文件中出现的第一个进程正常情况下就是发生ANR的那个进程。</span><br><span class="line"></span><br><span class="line">// Dump thread traces as quickly as we can, starting with &quot;interesting&quot; processes.</span><br><span class="line">firstPids.add(app.pid);</span><br><span class="line"></span><br><span class="line">int parentPid = app.pid;</span><br><span class="line">if (parent != null &amp;&amp; parent.app != null &amp;&amp; parent.app.pid &gt; 0) parentPid = parent.app.pid;</span><br><span class="line">if (parentPid != app.pid) firstPids.add(parentPid);</span><br><span class="line"></span><br><span class="line">if (MY_PID != app.pid &amp;&amp; MY_PID != parentPid) firstPids.add(MY_PID);</span><br><span class="line"></span><br><span class="line">for (int i = mLruProcesses.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">ProcessRecord r = mLruProcesses.get(i);</span><br><span class="line">if (r != null &amp;&amp; r.thread != null) &#123;</span><br><span class="line">int pid = r.pid;</span><br><span class="line">if (pid &gt; 0 &amp;&amp; pid != app.pid &amp;&amp; pid != parentPid &amp;&amp; pid != MY_PID) &#123;</span><br><span class="line">if (r.persistent) &#123;</span><br><span class="line">firstPids.add(pid);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">lastPids.put(pid, Boolean.TRUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Log the ANR to the main log.</span><br><span class="line">StringBuilder info = new StringBuilder();</span><br><span class="line">info.setLength(0);</span><br><span class="line">info.append(&quot;ANR in &quot;).append(app.processName);</span><br><span class="line">if (activity != null &amp;&amp; activity.shortComponentName != null) &#123;</span><br><span class="line">info.append(&quot; (&quot;).append(activity.shortComponentName).append(&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">info.append(&quot;\n&quot;);</span><br><span class="line">info.append(&quot;PID: &quot;).append(app.pid).append(&quot;\n&quot;);</span><br><span class="line">if (annotation != null) &#123;</span><br><span class="line">info.append(&quot;Reason: &quot;).append(annotation).append(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (parent != null &amp;&amp; parent != activity) &#123;</span><br><span class="line">info.append(&quot;Parent: &quot;).append(parent.shortComponentName).append(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final ProcessCpuTracker processCpuTracker = new ProcessCpuTracker(true);</span><br><span class="line"></span><br><span class="line">//dumpStackTraces()是输出ANR信息到traces文件的函数</span><br><span class="line">File tracesFile = dumpStackTraces(true, firstPids, processCpuTracker, lastPids,</span><br><span class="line">NATIVE_STACKS_OF_INTEREST);</span><br><span class="line"></span><br><span class="line">String cpuInfo = null;</span><br><span class="line">if (MONITOR_CPU_USAGE) &#123;</span><br><span class="line">updateCpuStatsNow();</span><br><span class="line">synchronized (mProcessCpuTracker) &#123;</span><br><span class="line">cpuInfo = mProcessCpuTracker.printCurrentState(anrTime);</span><br><span class="line">&#125;</span><br><span class="line">//输出ANR发生前一段时间内的CPU使用率</span><br><span class="line">info.append(processCpuTracker.printCurrentLoad());</span><br><span class="line">info.append(cpuInfo);</span><br><span class="line">&#125;</span><br><span class="line">//输出ANR发生后一段时间内的CPU使用率</span><br><span class="line">info.append(processCpuTracker.printCurrentState(anrTime));</span><br><span class="line"></span><br><span class="line">//此处， 把ANR的信息输出到main log中.</span><br><span class="line">Slog.e(TAG, info.toString());</span><br><span class="line">if (tracesFile == null) &#123;</span><br><span class="line">// There is no trace file, so dump (only) the alleged culprit&apos;s threads to the log</span><br><span class="line">Process.sendSignal(app.pid, Process.SIGNAL_QUIT);</span><br><span class="line">&#125;</span><br><span class="line">//将ANR信息同时输出到DropBox中</span><br><span class="line">addErrorToDropBox(&quot;anr&quot;, app, app.processName, activity, parent, annotation,</span><br><span class="line">cpuInfo, tracesFile, null);</span><br><span class="line"></span><br><span class="line">//在Android4.0中可以设置是否不显示ANR提示对话框，如果设置的话就不会显示对话框，并且会杀掉ANR进程</span><br><span class="line">// Unless configured otherwise, swallow ANRs in background processes &amp; kill the process.</span><br><span class="line">boolean showBackground = Settings.Secure.getInt(mContext.getContentResolver(),</span><br><span class="line">Settings.Secure.ANR_SHOW_BACKGROUND, 0) != 0;</span><br><span class="line"></span><br><span class="line">synchronized (this) &#123;</span><br><span class="line">mBatteryStatsService.noteProcessAnr(app.processName, app.uid);</span><br><span class="line"></span><br><span class="line">if (!showBackground &amp;&amp; !app.isInterestingToUserLocked() &amp;&amp; app.pid != MY_PID) &#123;</span><br><span class="line">app.kill(&quot;bg anr&quot;, true);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Set the app&apos;s notResponding state, and look up the errorReportReceiver</span><br><span class="line">makeAppNotRespondingLocked(app,</span><br><span class="line">activity != null ? activity.shortComponentName : null,</span><br><span class="line">annotation != null ? &quot;ANR &quot; + annotation : &quot;ANR&quot;,</span><br><span class="line">info.toString());</span><br><span class="line"></span><br><span class="line">// 显示ANR提示对话框</span><br><span class="line">// Bring up the infamous App Not Responding dialog</span><br><span class="line">Message msg = Message.obtain();</span><br><span class="line">HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">msg.what = SHOW_NOT_RESPONDING_MSG;</span><br><span class="line">msg.obj = map;</span><br><span class="line">msg.arg1 = aboveSystem ? 1 : 0;</span><br><span class="line">map.put(&quot;app&quot;, app);</span><br><span class="line">if (activity != null) &#123;</span><br><span class="line">map.put(&quot;activity&quot;, activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mUiHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public static File dumpStackTraces(boolean clearTraces, ArrayList&lt;Integer&gt; firstPids,</span><br><span class="line">ProcessCpuTracker processCpuTracker, SparseArray&lt;Boolean&gt; lastPids, String[] nativeProcs) &#123;</span><br><span class="line">//系统属性“dalvik.vm.stack-trace-file”用来配置trace信息输出文件</span><br><span class="line">//之所以trace信息会输出到“/data/anr/traces.txt”文件中，就是系统属性“dalvik.vm.stack-trace-file”设置的</span><br><span class="line">//adb shell下， 可以使用setprop和getprop对系统属性进行设置和读取</span><br><span class="line">//getprop dalvik.vm.stack-trace-file</span><br><span class="line">//setprop dalvik.vm.stack-trace-file /tmp/stack-traces.txt</span><br><span class="line"></span><br><span class="line">String tracesPath = SystemProperties.get(&quot;dalvik.vm.stack-trace-file&quot;, null);</span><br><span class="line">if (tracesPath == null || tracesPath.length() == 0) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File tracesFile = new File(tracesPath);</span><br><span class="line">try &#123;</span><br><span class="line">File tracesDir = tracesFile.getParentFile();</span><br><span class="line">if (!tracesDir.exists()) &#123;</span><br><span class="line">tracesDir.mkdirs();</span><br><span class="line">if (!SELinux.restorecon(tracesDir)) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//FileUtils.setPermissions是个很有用的函数，设置文件属性时经常会用到</span><br><span class="line">FileUtils.setPermissions(tracesDir.getPath(), 0775, -1, -1);  // drwxrwxr-x</span><br><span class="line">//clearTraces为true，会删除旧文件，创建新文件</span><br><span class="line">if (clearTraces &amp;&amp; tracesFile.exists()) tracesFile.delete();</span><br><span class="line">tracesFile.createNewFile();</span><br><span class="line">FileUtils.setPermissions(tracesFile.getPath(), 0666, -1, -1); // -rw-rw-rw-</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">Slog.w(TAG, &quot;Unable to prepare ANR traces file: &quot; + tracesPath, e);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dumpStackTraces(tracesPath, firstPids, processCpuTracker, lastPids, nativeProcs);</span><br><span class="line">return tracesFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private static void dumpStackTraces(String tracesPath, ArrayList&lt;Integer&gt; firstPids,</span><br><span class="line">ProcessCpuTracker processCpuTracker, SparseArray&lt;Boolean&gt; lastPids, String[] nativeProcs) &#123;</span><br><span class="line">// Use a FileObserver to detect when traces finish writing.</span><br><span class="line">// The order of traces is considered important to maintain for legibility.</span><br><span class="line">//使用FileObserver监听SignalCatcher线程是否已经完成写入traces文件的操作</span><br><span class="line">FileObserver observer = new FileObserver(tracesPath, FileObserver.CLOSE_WRITE) &#123;</span><br><span class="line">@Override</span><br><span class="line">public synchronized void onEvent(int event, String path) &#123;</span><br><span class="line">notify(); //让其他阻塞在observer.wait()这行代码的线程继续往下执行.</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">observer.startWatching();</span><br><span class="line">//首先输出firstPids集合中指定的进程，这些也是对ANR问题来说最重要的进程</span><br><span class="line">// First collect all of the stacks of the most important pids.</span><br><span class="line">if (firstPids != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int num = firstPids.size();</span><br><span class="line">for (int i = 0; i &lt; num; i++) &#123;</span><br><span class="line">synchronized (observer) &#123;</span><br><span class="line">//前面提到的SIGNAL_QUIT, 由SignalCatcher线程处理Process.SIGNAL_QUIT信号， 并把进程中的各个线程输出到traces.txt文件中.</span><br><span class="line">//具体代码可以查看/dalvik/vm/目录下的SignalCatcher.cpp::logThreadStacks函数和Thread.cpp:: dvmDumpAllThreadsEx函数。</span><br><span class="line">Process.sendSignal(firstPids.get(i), Process.SIGNAL_QUIT);</span><br><span class="line">observer.wait(200);  // Wait for write-close, give up after 200msec</span><br><span class="line">//block here, 直到另一个线程调用了observer.notify() or observer.notifyAll()方法， 再或是等待了200毫秒超时后， 才会继续往下执行代码.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">Slog.wtf(TAG, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; finally &#123;</span><br><span class="line">observer.stopWatching();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.java</span><br><span class="line">final void  notify()</span><br><span class="line">//Causes a thread which is waiting on this object&apos;s monitor (by means of calling one of the wait() methods) to be woken up.</span><br><span class="line">final void  notifyAll()</span><br><span class="line">//Causes all threads which are waiting on this object&apos;s monitor (by means of calling one of the wait() methods) to be woken up.</span><br><span class="line">final void  wait()</span><br><span class="line">//Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.</span><br><span class="line">final void  wait(long millis)</span><br><span class="line">//Causes the calling thread to wait until another thread calls the notify() or notifyAll() method</span><br><span class="line">//of this object or until the specified timeout expires.</span><br></pre></td></tr></table></figure><p>refer to :</p><p><a href="http://rayleeya.iteye.com/blog/1955657" target="_blank" rel="noopener">http://rayleeya.iteye.com/blog/1955657</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-ANR-分析研究&quot;&gt;&lt;a href=&quot;#Android-ANR-分析研究&quot; class=&quot;headerlink&quot; title=&quot;Android ANR 分析研究&quot;&gt;&lt;/a&gt;Android ANR 分析研究&lt;/h1&gt;&lt;p&gt;参考文档 : &lt;a href
      
    
    </summary>
    
    
    
      <category term="Android开发" scheme="http://yoursite.com/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IPhone桌面图标自定义排布</title>
    <link href="http://yoursite.com/2018/01/08/iPhoeni%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%B8%83/"/>
    <id>http://yoursite.com/2018/01/08/iPhoeni%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%B8%83/</id>
    <published>2018-01-08T06:58:18.000Z</published>
    <updated>2018-01-08T06:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>该项目是根据是通过调用cocoaHTTPSever第三方开源库,将本地的html文件通过<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>…… 来实现app调起safari 的逻辑!</p><p>上代码 ——&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ChooseIconVC.h&quot;</span><br><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &quot;ChooseIconTool.h&quot;</span><br><span class="line">#import &quot;HTTPServer.h&quot;</span><br><span class="line">#import &quot;DDLog.h&quot;</span><br><span class="line">#import &quot;DDTTYLogger.h&quot;</span><br><span class="line">#import &quot;YYKit.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define ScreenHeight ([[UIScreen mainScreen]bounds].size.height)</span><br><span class="line">#define Device_Is_iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface ChooseIconVC ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ChooseIconVC &#123;</span><br><span class="line">    CGRect iconFrame;</span><br><span class="line">    UIButton *chooseButton;</span><br><span class="line">    int  scale;</span><br><span class="line">    HTTPServer *httpServer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">    [self creatBackImage];</span><br><span class="line">    [self creatDissmissBtn];</span><br><span class="line">    [self creatAppLocalBtn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    // Dispose of any resources that can be recreated.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)creatBackImage &#123;</span><br><span class="line"></span><br><span class="line">    UIImageView  * backImageView = [[UIImageView alloc]initWithImage:[ChooseIconTool getInstance].iconImageOri];</span><br><span class="line">    [backImageView setFrame:self.view.frame];</span><br><span class="line">    [self.view addSubview:backImageView];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) creatDissmissBtn &#123;</span><br><span class="line">    chooseButton = [UIButton buttonWithType:UIButtonTypeSystem];</span><br><span class="line">    [chooseButton setFrame:CGRectMake(20, self.view.bounds.size.height - 60, 60, 60)];</span><br><span class="line">    [chooseButton setTitle:@&quot;back&quot; forState:UIControlStateNormal];</span><br><span class="line">    [chooseButton addTarget:self action:@selector(dissmissVC) forControlEvents:UIControlEventTouchDown];</span><br><span class="line">    [self.view addSubview:chooseButton];</span><br><span class="line">    [self.view bringSubviewToFront:chooseButton];</span><br><span class="line">    [chooseButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];</span><br><span class="line">    [chooseButton setBackgroundColor:[UIColor redColor]];</span><br><span class="line">&#125;</span><br><span class="line">- (void) dissmissVC &#123;</span><br><span class="line">[self dismissViewControllerAnimate  d:YES completion:nil];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) creatAppLocalBtn &#123;</span><br><span class="line"></span><br><span class="line">    //iphone X = 27+45; 72</span><br><span class="line">    //other iphone = 27   /   28    /  38;</span><br><span class="line">    //PW: (screen.width - 60*4)/5</span><br><span class="line">    //pH: (screen.height - 91 - 27)/5  / 6: (screen.height - 91 - 28)/5  /    6p : (screen.height - 91 - 38)/6   iphoneX : (screen.height - 91 - 72)/6</span><br><span class="line"></span><br><span class="line">    int appnum = 6;//竖排的app数目</span><br><span class="line">    float heightTotop = 28; //第一排的app到手机透顶的距离</span><br><span class="line">    float heihtToBottom = 111;</span><br><span class="line">    if (ScreenHeight == 568) &#123;</span><br><span class="line">        //iphone 5</span><br><span class="line">        appnum = 5;</span><br><span class="line">        heightTotop = 27;</span><br><span class="line">        heihtToBottom = 101.2;</span><br><span class="line">        scale = 2;</span><br><span class="line">        NSLog(@&quot;iphone 5&quot;);</span><br><span class="line"></span><br><span class="line">    &#125; else if (ScreenHeight == 667)&#123;</span><br><span class="line">        //iphone 6</span><br><span class="line">        appnum = 6;</span><br><span class="line">        heightTotop = 28;</span><br><span class="line">        heihtToBottom = 111;</span><br><span class="line">        scale = 2;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;iphone 6&quot;);</span><br><span class="line"></span><br><span class="line">    &#125; else if (ScreenHeight == 736) &#123;</span><br><span class="line">        //iphone 6p</span><br><span class="line">        appnum = 6;</span><br><span class="line">        heightTotop = 38;</span><br><span class="line">        heihtToBottom = 98;</span><br><span class="line">        scale = 3;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;iphone 6p&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; else if (Device_Is_iPhoneX) &#123;</span><br><span class="line">        //iphone X</span><br><span class="line">        appnum = 6;</span><br><span class="line">        heightTotop = 72;</span><br><span class="line">        heihtToBottom = 127.7;</span><br><span class="line">        scale = 3;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;iphone X&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    float wid = (self.view.bounds.size.width -60*4)/5;</span><br><span class="line">    float heig = (ScreenHeight - heihtToBottom - heightTotop)/appnum;</span><br><span class="line">    NSLog(@&quot;wid : %f   Hei : %f&quot;,wid, heig);</span><br><span class="line">        for (int i = 0; i &lt; appnum; i++) &#123;</span><br><span class="line">            for (int j = 0 ; j &lt; 4; j++) &#123;</span><br><span class="line">            UIButton *chooseIcon = [UIButton buttonWithType:UIButtonTypeSystem];</span><br><span class="line">            [chooseIcon setFrame:CGRectMake(wid+(wid + 60)*j, heightTotop + heig * i, 60, 60)];</span><br><span class="line">            chooseIcon.tag = (4 * i) + j + 200;</span><br><span class="line">            [self.view addSubview:chooseIcon];</span><br><span class="line">            [chooseIcon setBackgroundColor:[UIColor redColor]];</span><br><span class="line">            chooseIcon.alpha = 0.5;</span><br><span class="line">            [chooseIcon addTarget:self action:@selector(chooseIconBtnClick:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)chooseIconBtnClick:(UIButton *)sender&#123;</span><br><span class="line">    [self clipImage:sender.frame];</span><br><span class="line">    [self saveImageTolocal:[ChooseIconTool getInstance].iconImageClip];</span><br><span class="line"></span><br><span class="line">    //    NSString * localImagePath = nil;</span><br><span class="line">    //    if ([ChooseIconTool getInstance].iconImageClip) &#123;</span><br><span class="line">    //      localImagePath = [self saveImageTolocal:[ChooseIconTool getInstance].iconImageClip];</span><br><span class="line">    ////      localImagePath = [self saveImageTolocalByBase64:[ChooseIconTool getInstance].iconImageClip];</span><br><span class="line">    ////        NSLog(@&quot;图片64位 : %@&quot;,localImagePath);</span><br><span class="line">    //        if (localImagePath &amp;&amp; localImagePath.length &gt; 0) &#123;</span><br><span class="line">    //            [self shareLocalClick:localImagePath];</span><br><span class="line">    //            NSLog(@&quot;长度:%lu&quot;,(unsigned long)localImagePath.length);</span><br><span class="line">    //        &#125;</span><br><span class="line">    //    &#125; else &#123;</span><br><span class="line">    //        NSLog(@&quot;没图片&quot;);</span><br><span class="line">    //    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) clipImage:(CGRect)frame &#123;</span><br><span class="line">    CGRect lastFrame = CGRectMake(frame.origin.x * scale, frame.origin.y * scale, frame.size.width * scale, frame.size.height * scale);</span><br><span class="line">    //    UIBezierPath * bezierP = [UIBezierPath bezierPathWithRect:lastFrame];</span><br><span class="line">    //  [ChooseIconTool getInstance].iconImageClip = [self clipWithPath:bezierP InRect:lastFrame];</span><br><span class="line">    [ChooseIconTool getInstance].iconImageClip = [self clipImageWithRect:lastFrame];</span><br><span class="line"></span><br><span class="line">    [chooseButton setBackgroundImage:[ChooseIconTool getInstance].iconImageClip forState:UIControlStateNormal];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 根据path在rect范围内切割图片</span><br><span class="line">//https://www.jianshu.com/p/6130b51a0b71</span><br><span class="line">-(UIImage*)clipWithPath:(UIBezierPath*)path InRect:(CGRect)rect&#123;</span><br><span class="line">    UIImage * image = [ChooseIconTool getInstance].iconImageOri;</span><br><span class="line"></span><br><span class="line">    //开始绘制图片</span><br><span class="line">    UIGraphicsBeginImageContext(image.size);</span><br><span class="line">    //UIGraphicsBeginImageContextWithOptions(image.size, NO, image.scale);</span><br><span class="line"></span><br><span class="line">    CGContextRef contextRef = UIGraphicsGetCurrentContext();</span><br><span class="line">    ////绘制Clip区域</span><br><span class="line">    CGRect myRect = rect;</span><br><span class="line"></span><br><span class="line">    UIBezierPath * clipPath = path;</span><br><span class="line">    CGContextAddPath(contextRef, clipPath.CGPath);</span><br><span class="line">    CGContextClosePath(contextRef);</span><br><span class="line">    CGContextClip(contextRef);</span><br><span class="line">    //坐标系转换</span><br><span class="line">    //因为CGContextDrawImage会使用Quartz内的以左下角为(0,0)的坐标系</span><br><span class="line">    //沿着y轴移动</span><br><span class="line">    CGContextTranslateCTM(contextRef, 0, image.size.height);</span><br><span class="line"></span><br><span class="line">    //缩放</span><br><span class="line">    CGContextScaleCTM(contextRef, image.scale, -image.scale);</span><br><span class="line">    CGRect drawRect = CGRectMake(0, 0, image.size.width, image.size.height);</span><br><span class="line">    CGContextDrawImage(contextRef, drawRect, [image CGImage]);</span><br><span class="line">    //结束绘画</span><br><span class="line">    UIImage *destImg = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line"></span><br><span class="line">    destImg = [self clipImageWithRect:myRect];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //return destImg;</span><br><span class="line">    return destImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 根据rect裁剪图片 */</span><br><span class="line">-(UIImage *)clipImageWithRect:(CGRect)rect&#123;</span><br><span class="line">    UIImage * image  = [ChooseIconTool getInstance].iconImageOri;</span><br><span class="line">    CGRect myRect = rect;</span><br><span class="line">    CGImageRef  imageRef = CGImageCreateWithImageInRect(image.CGImage, myRect);</span><br><span class="line">    UIGraphicsBeginImageContext(myRect.size);</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    CGContextDrawImage(context, myRect, imageRef);</span><br><span class="line">    UIImage * clipImage = [UIImage imageWithCGImage:imageRef];</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line"></span><br><span class="line">    //转成png格式 会保留透明</span><br><span class="line">    NSData * data = UIImagePNGRepresentation(clipImage);</span><br><span class="line">    UIImage * dImage = [UIImage imageWithData:data];</span><br><span class="line"></span><br><span class="line">    return dImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)shareLocalClick:(NSString *)localImagePath</span><br><span class="line">&#123;</span><br><span class="line">    //ddlog打印初始化</span><br><span class="line">    [DDLog addLogger:[DDTTYLogger sharedInstance]];</span><br><span class="line"></span><br><span class="line">    httpServer = [[HTTPServer alloc] init];</span><br><span class="line"></span><br><span class="line">    [httpServer setType:@&quot;_http._tcp.&quot;];</span><br><span class="line"></span><br><span class="line">    [httpServer setPort:12345];</span><br><span class="line"></span><br><span class="line">    // Serve files from our embedded Web folder</span><br><span class="line">    //文件夹一定要以folder方式导入到项目中文件名一定要一一致</span><br><span class="line">    NSString *webPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@&quot;HTML&quot;];</span><br><span class="line">    NSLog(@&quot;Setting document root: %@&quot;, webPath);</span><br><span class="line"></span><br><span class="line">    [httpServer setDocumentRoot:webPath];</span><br><span class="line"></span><br><span class="line">    [self startServer];</span><br><span class="line">    NSString * localImagePathURLStr = [NSString stringWithFormat:@&quot;http://127.0.0.1:12345/context.html?image=%@&quot;,localImagePath];</span><br><span class="line">    NSLog(@&quot;网址打印 : %@&quot;,localImagePathURLStr);</span><br><span class="line">    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:localImagePathURLStr]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)startServer</span><br><span class="line">&#123;</span><br><span class="line">    NSError *error;</span><br><span class="line">    if([httpServer start:&amp;error])</span><br><span class="line">    &#123;</span><br><span class="line">        NSLog(@&quot;Started HTTP Server on port %hu&quot;, [httpServer listeningPort]);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        NSLog(@&quot;Error starting HTTP Server: %@&quot;, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void )saveImageTolocal:(UIImage *)image &#123;</span><br><span class="line">    [self loadImageFinished:image];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//保存到相册</span><br><span class="line">- (void)loadImageFinished:(UIImage *)image</span><br><span class="line">&#123;</span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), (__bridge void *)self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;保存相册 image = %@, error = %@, contextInfo = %@&quot;, image, error, contextInfo);</span><br><span class="line">    [self shareLocalClick:@&quot;Con.png&quot;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:bundle文件夹名一定要写对!!!!!!!<br>结束!!!(剩下的懒得说了基本代码里面都有了!0.o)<br>demo: <a href="https://github.com/JikerSun/screenAppHiden" target="_blank" rel="noopener">https://github.com/JikerSun/screenAppHiden</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该项目是根据是通过调用cocoaHTTPSever第三方开源库,将本地的html文件通过&lt;a href=&quot;http://127.0.0.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://127.0.0.1&lt;/a&gt;…… 来实现app调起safa
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一位比较资深的安卓开发工程师的架构构造/项目经验总结</title>
    <link href="http://yoursite.com/2018/01/08/%E4%B8%80%E4%BD%8D%E6%AF%94%E8%BE%83%E8%B5%84%E6%B7%B1%E7%9A%84%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%9E%B6%E6%9E%84%E6%9E%84%E9%80%A0-%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/08/%E4%B8%80%E4%BD%8D%E6%AF%94%E8%BE%83%E8%B5%84%E6%B7%B1%E7%9A%84%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%9E%B6%E6%9E%84%E6%9E%84%E9%80%A0-%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2018-01-08T06:25:47.000Z</published>
    <updated>2018-01-08T06:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一位比较资深的安卓开发工程师的架构构造-项目经验总结"><a href="#一位比较资深的安卓开发工程师的架构构造-项目经验总结" class="headerlink" title="一位比较资深的安卓开发工程师的架构构造/项目经验总结"></a>一位比较资深的安卓开发工程师的架构构造/项目经验总结</h1><hr><h2 id="标记一下用于以后详细钻研"><a href="#标记一下用于以后详细钻研" class="headerlink" title="标记一下用于以后详细钻研"></a>标记一下用于以后详细钻研</h2><p><a href="https://github.com/zhusonger/android" target="_blank" rel="noopener">https://github.com/zhusonger/android</a></p><h2 id="大体内容简介"><a href="#大体内容简介" class="headerlink" title="大体内容简介 :"></a>大体内容简介 :</h2><p><img src="/images/zhusong1.png" alt="&quot;image&quot;"></p><hr><h1 id="目录结构简介"><a href="#目录结构简介" class="headerlink" title="目录结构简介 :"></a>目录结构简介 :</h1><p><img src="/images/zhusong2.jpeg" alt="&quot;image&quot;"></p><h1 id="android"><a href="#android" class="headerlink" title="android"></a>android</h1><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><ul><li>关于Android开发中Gradle以及maven相关的知识</li></ul><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><ul><li>Android使用开发小窍门</li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li>补充java的知识</li></ul><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><ul><li>手机录屏与录音相关的知识</li></ul><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul><li>开发中提高效率的工具集合</li></ul><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><ul><li>android系统层的知识</li><li>触手录重构的项目架构</li><li>隐藏api: <a href="https://github.com/anggrayudi/android-hidden-api" target="_blank" rel="noopener">https://github.com/anggrayudi/android-hidden-api</a></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>Git相关知识</li><li>删除大文件: <a href="http://www.cnblogs.com/shines77/p/3460274.html" target="_blank" rel="noopener">http://www.cnblogs.com/shines77/p/3460274.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一位比较资深的安卓开发工程师的架构构造-项目经验总结&quot;&gt;&lt;a href=&quot;#一位比较资深的安卓开发工程师的架构构造-项目经验总结&quot; class=&quot;headerlink&quot; title=&quot;一位比较资深的安卓开发工程师的架构构造/项目经验总结&quot;&gt;&lt;/a&gt;一位比较资深的安
      
    
    </summary>
    
    
    
      <category term="Android开发" scheme="http://yoursite.com/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IJKPlayer 初认识</title>
    <link href="http://yoursite.com/2018/01/05/IJKPlayer-%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2018/01/05/IJKPlayer-%E5%88%9D%E8%AE%A4%E8%AF%86/</id>
    <published>2018-01-05T08:04:25.000Z</published>
    <updated>2018-01-08T06:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IJKPlayer-初认识"><a href="#IJKPlayer-初认识" class="headerlink" title="IJKPlayer 初认识"></a>IJKPlayer 初认识</h1><h2 id="IJKPlayer-github"><a href="#IJKPlayer-github" class="headerlink" title="IJKPlayer  github"></a>IJKPlayer  github</h2><p>技术支持</p><p><a href="https://github.com/Bilibili/ijkplayer/issues/1480" target="_blank" rel="noopener">https://github.com/Bilibili/ijkplayer/issues/1480</a></p><p>//github</p><p><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">https://github.com/Bilibili/ijkplayer</a></p><p>导入介绍<br><a href="http://www.jianshu.com/p/1f06b27b3ac0" target="_blank" rel="noopener">http://www.jianshu.com/p/1f06b27b3ac0</a></p><p>chushoutv专用格式</p><p>rtmp / stream h264  aac</p><p><img src="/images/IJKPlayer1.tiff" alt="&quot;image&quot;"></p><p><img src="/images/IJKPlayer2.tiff" alt="&quot;image&quot;"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">//脚本自定义编辑</span><br><span class="line"></span><br><span class="line">#! /usr/bin/env bash</span><br><span class="line">#</span><br><span class="line"># Copyright (C) 2013-2014 Zhang Rui &lt;bbcallen@gmail.com&gt;</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#----------</span><br><span class="line"># modify for your build tool</span><br><span class="line"></span><br><span class="line">FF_ALL_ARCHS_IOS6_SDK=&quot;armv7 armv7s i386&quot;</span><br><span class="line">FF_ALL_ARCHS_IOS7_SDK=&quot;armv7 armv7s arm64 i386 x86_64&quot;</span><br><span class="line">FF_ALL_ARCHS_IOS8_SDK=&quot;armv7 arm64 i386 x86_64&quot;</span><br><span class="line"></span><br><span class="line">FF_ALL_ARCHS=$FF_ALL_ARCHS_IOS8_SDK</span><br><span class="line"></span><br><span class="line">#----------</span><br><span class="line">UNI_BUILD_ROOT=`pwd`</span><br><span class="line">UNI_TMP=&quot;$UNI_BUILD_ROOT/tmp&quot;</span><br><span class="line">UNI_TMP_LLVM_VER_FILE=&quot;$UNI_TMP/llvm.ver.txt&quot;</span><br><span class="line">FF_TARGET=$1</span><br><span class="line">FF_TARGET_EXTRA=$2</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">#----------</span><br><span class="line">echo_archs() &#123;</span><br><span class="line">echo &quot;====================&quot;</span><br><span class="line">echo &quot;[*] check xcode version&quot;</span><br><span class="line">echo &quot;====================&quot;</span><br><span class="line">echo &quot;FF_ALL_ARCHS = $FF_ALL_ARCHS&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FF_LIBS=&quot;libavcodec libavfilter libavformat libavutil libswscale libswresample&quot;</span><br><span class="line">do_lipo_ffmpeg () &#123;</span><br><span class="line">LIB_FILE=$1</span><br><span class="line">LIPO_FLAGS=</span><br><span class="line">for ARCH in $FF_ALL_ARCHS</span><br><span class="line">do</span><br><span class="line">ARCH_LIB_FILE=&quot;$UNI_BUILD_ROOT/build/ffmpeg-$ARCH/output/lib/$LIB_FILE&quot;</span><br><span class="line">if [ -f &quot;$ARCH_LIB_FILE&quot; ]; then</span><br><span class="line">LIPO_FLAGS=&quot;$LIPO_FLAGS $ARCH_LIB_FILE&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;skip $LIB_FILE of $ARCH&quot;;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">xcrun lipo -create $LIPO_FLAGS -output $UNI_BUILD_ROOT/build/universal/lib/$LIB_FILE</span><br><span class="line">xcrun lipo -info $UNI_BUILD_ROOT/build/universal/lib/$LIB_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SSL_LIBS=&quot;libcrypto libssl&quot;</span><br><span class="line">do_lipo_ssl () &#123;</span><br><span class="line">LIB_FILE=$1</span><br><span class="line">LIPO_FLAGS=</span><br><span class="line">for ARCH in $FF_ALL_ARCHS</span><br><span class="line">do</span><br><span class="line">ARCH_LIB_FILE=&quot;$UNI_BUILD_ROOT/build/openssl-$ARCH/output/lib/$LIB_FILE&quot;</span><br><span class="line">if [ -f &quot;$ARCH_LIB_FILE&quot; ]; then</span><br><span class="line">LIPO_FLAGS=&quot;$LIPO_FLAGS $ARCH_LIB_FILE&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;skip $LIB_FILE of $ARCH&quot;;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ &quot;$LIPO_FLAGS&quot; != &quot;&quot; ]; then</span><br><span class="line">xcrun lipo -create $LIPO_FLAGS -output $UNI_BUILD_ROOT/build/universal/lib/$LIB_FILE</span><br><span class="line">xcrun lipo -info $UNI_BUILD_ROOT/build/universal/lib/$LIB_FILE</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do_lipo_all () &#123;</span><br><span class="line">mkdir -p $UNI_BUILD_ROOT/build/universal/lib</span><br><span class="line">echo &quot;lipo archs: $FF_ALL_ARCHS&quot;</span><br><span class="line">for FF_LIB in $FF_LIBS</span><br><span class="line">do</span><br><span class="line">do_lipo_ffmpeg &quot;$FF_LIB.a&quot;;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">ANY_ARCH=</span><br><span class="line">for ARCH in $FF_ALL_ARCHS</span><br><span class="line">do</span><br><span class="line">ARCH_INC_DIR=&quot;$UNI_BUILD_ROOT/build/ffmpeg-$ARCH/output/include&quot;</span><br><span class="line">if [ -d &quot;$ARCH_INC_DIR&quot; ]; then</span><br><span class="line">if [ -z &quot;$ANY_ARCH&quot; ]; then</span><br><span class="line">ANY_ARCH=$ARCH</span><br><span class="line">cp -R &quot;$ARCH_INC_DIR&quot; &quot;$UNI_BUILD_ROOT/build/universal/&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">UNI_INC_DIR=&quot;$UNI_BUILD_ROOT/build/universal/include&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p &quot;$UNI_INC_DIR/libavutil/$ARCH&quot;</span><br><span class="line">cp -f &quot;$ARCH_INC_DIR/libavutil/avconfig.h&quot;  &quot;$UNI_INC_DIR/libavutil/$ARCH/avconfig.h&quot;</span><br><span class="line">cp -f tools/avconfig.h                      &quot;$UNI_INC_DIR/libavutil/avconfig.h&quot;</span><br><span class="line">cp -f &quot;$ARCH_INC_DIR/libavutil/ffversion.h&quot; &quot;$UNI_INC_DIR/libavutil/$ARCH/ffversion.h&quot;</span><br><span class="line">cp -f tools/ffversion.h                     &quot;$UNI_INC_DIR/libavutil/ffversion.h&quot;</span><br><span class="line">mkdir -p &quot;$UNI_INC_DIR/libffmpeg/$ARCH&quot;</span><br><span class="line">cp -f &quot;$ARCH_INC_DIR/libffmpeg/config.h&quot;    &quot;$UNI_INC_DIR/libffmpeg/$ARCH/config.h&quot;</span><br><span class="line">cp -f tools/config.h                        &quot;$UNI_INC_DIR/libffmpeg/config.h&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for SSL_LIB in $SSL_LIBS</span><br><span class="line">do</span><br><span class="line">do_lipo_ssl &quot;$SSL_LIB.a&quot;;</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#----------</span><br><span class="line">if [ &quot;$FF_TARGET&quot; = &quot;armv7&quot; -o &quot;$FF_TARGET&quot; = &quot;armv7s&quot; -o &quot;$FF_TARGET&quot; = &quot;arm64&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">sh tools/do-compile-ffmpeg.sh $FF_TARGET $FF_TARGET_EXTRA</span><br><span class="line">do_lipo_all</span><br><span class="line">elif [ &quot;$FF_TARGET&quot; = &quot;i386&quot; -o &quot;$FF_TARGET&quot; = &quot;x86_64&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">sh tools/do-compile-ffmpeg.sh $FF_TARGET $FF_TARGET_EXTRA</span><br><span class="line">do_lipo_all</span><br><span class="line">elif [ &quot;$FF_TARGET&quot; = &quot;lipo&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">do_lipo_all</span><br><span class="line">elif [ &quot;$FF_TARGET&quot; = &quot;all&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">for ARCH in $FF_ALL_ARCHS</span><br><span class="line">do</span><br><span class="line">sh tools/do-compile-ffmpeg.sh $ARCH $FF_TARGET_EXTRA</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">do_lipo_all</span><br><span class="line">elif [ &quot;$FF_TARGET&quot; = &quot;check&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">elif [ &quot;$FF_TARGET&quot; = &quot;clean&quot; ]; then</span><br><span class="line">echo_archs</span><br><span class="line">for ARCH in $FF_ALL_ARCHS</span><br><span class="line">do</span><br><span class="line">cd ffmpeg-$ARCH &amp;&amp; git clean -xdf &amp;&amp; cd -</span><br><span class="line">done</span><br><span class="line">rm -rf build/ffmpeg-*</span><br><span class="line">rm -rf build/openssl-*</span><br><span class="line">rm -rf build/universal/include</span><br><span class="line">rm -rf build/universal/lib</span><br><span class="line">else</span><br><span class="line">echo &quot;Usage:&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh armv7|arm64|i386|x86_64&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh armv7s (obselete)&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh lipo&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh all&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh clean&quot;</span><br><span class="line">echo &quot;  compile-ffmpeg.sh check&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="/images/IJKPlayer3.tiff" alt="&quot;image&quot;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IJKPlayer-初认识&quot;&gt;&lt;a href=&quot;#IJKPlayer-初认识&quot; class=&quot;headerlink&quot; title=&quot;IJKPlayer 初认识&quot;&gt;&lt;/a&gt;IJKPlayer 初认识&lt;/h1&gt;&lt;h2 id=&quot;IJKPlayer-github&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>metal初认识</title>
    <link href="http://yoursite.com/2018/01/05/metal%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2018/01/05/metal%E5%88%9D%E8%AE%A4%E8%AF%86/</id>
    <published>2018-01-05T08:01:34.000Z</published>
    <updated>2018-01-08T06:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="metal初认识"><a href="#metal初认识" class="headerlink" title="metal初认识"></a>metal初认识</h1><p><a href="https://www.objccn.io/issue-18-2/" target="_blank" rel="noopener">https://www.objccn.io/issue-18-2/</a></p><p>Metal 和 openGL 坐标</p><p><img src="/images/metal1.tiff" alt="&quot;image&quot;"></p><p>Metal 框架支持 GPU 加速高级 3D 图像渲染，以及数据并行计算工作。Metal 提供了先进合理的 API，它不仅为图形的组织、处理和呈现，也为计算命令以及为这些命令相关的数据和资源的管理，提供了细粒度和底层的控制。Metal 的主要目的是最小化 GPU 工作时 CPU 所要的消耗。</p><p>该框架被设计用来实现两个目标: 3D 图形渲染和并行计算。这两者有很多共同点。它们都在数量庞大的数据上并行运行特殊的代码，并可以在 GPU. 上执行。</p><p>Metal 的资源非常有限，并且仅限于搭载了 64 位处理器的 iPhone 和 iPad。但另外一方面，因为 OpenGL 的限制，其性能与 Metal 相比并不占优势，毕竟后者是专门用来解决这些问题的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;metal初认识&quot;&gt;&lt;a href=&quot;#metal初认识&quot; class=&quot;headerlink&quot; title=&quot;metal初认识&quot;&gt;&lt;/a&gt;metal初认识&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.objccn.io/issue-18-2/&quot; ta
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>静态的frameWork生成/最大的源码下载中文网站(不知道真假,估计是吹牛逼)</title>
    <link href="http://yoursite.com/2018/01/05/%E6%8A%80%E6%9C%AF%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E8%AE%B0%E5%BD%952/"/>
    <id>http://yoursite.com/2018/01/05/%E6%8A%80%E6%9C%AF%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E8%AE%B0%E5%BD%952/</id>
    <published>2018-01-05T07:55:06.000Z</published>
    <updated>2020-11-25T02:46:15.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态的frameWork生成-支持ios7版本"><a href="#静态的frameWork生成-支持ios7版本" class="headerlink" title="静态的frameWork生成 支持ios7版本"></a>静态的frameWork生成 支持ios7版本</h1><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p>Mach-O 改成static xxxx模式(静态库 动态库是dxxxx 忘了)</p><p>时刻注意支持的架构</p><p>前两个引用库删掉</p><h2 id="添加静态库的工程"><a href="#添加静态库的工程" class="headerlink" title="添加静态库的工程:"></a>添加静态库的工程:</h2><p>1.Build Settings  —&gt;  Other Linker Flags — &gt; -framework   CSRecSDK.framework    (可行)</p><p>2.<img src="/images/framework.tiff" alt="&quot;image&quot;"></p><h1 id="欢迎光临最大的源码下载中文网站http-www-pudn-com"><a href="#欢迎光临最大的源码下载中文网站http-www-pudn-com" class="headerlink" title="欢迎光临最大的源码下载中文网站http://www.pudn.com"></a>欢迎光临最大的源码下载中文网站<a href="http://www.pudn.com" target="_blank" rel="noopener">http://www.pudn.com</a></h1><hr><p>本站以C语言和Java语言、嵌入式开发、算法实现为主，源码数量达几十万个，有200多个分类，很多都是本站会员的私家珍藏，互联网上其他地方是找不到的</p><p><a href="http://www.pudn.com" target="_blank" rel="noopener">http://www.pudn.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态的frameWork生成-支持ios7版本&quot;&gt;&lt;a href=&quot;#静态的frameWork生成-支持ios7版本&quot; class=&quot;headerlink&quot; title=&quot;静态的frameWork生成 支持ios7版本&quot;&gt;&lt;/a&gt;静态的frameWork生成 支持
      
    
    </summary>
    
    
    
      <category term="技术探索" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>android替换sdk重新打包/IOS 本地保存Crash日志信息/LeakCanary 使用/cocos 工程创建和调用/android Gradle 配置说明/objc.all_load.force_load区分</title>
    <link href="http://yoursite.com/2018/01/05/ios%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/01/05/ios%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E8%AE%B0%E5%BD%95/</id>
    <published>2018-01-05T07:47:29.000Z</published>
    <updated>2018-01-08T06:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android-替换sdk重新打包"><a href="#android-替换sdk重新打包" class="headerlink" title="android  替换sdk重新打包:"></a>android  替换sdk重新打包:</h1><ol><li>apk 反编译</li><li>下载Android crack tool</li><li>选择 “重建apk” 选择之前反编译的目录</li><li>点击签名 选择上一步的生成的apk</li><li>运行新apk</li></ol><h1 id="IOS-本地保存Crash日志信息"><a href="#IOS-本地保存Crash日志信息" class="headerlink" title="IOS 本地保存Crash日志信息"></a>IOS 本地保存Crash日志信息</h1><p><a href="http://blog.csdn.net/cjh16102377/article/details/48315327" target="_blank" rel="noopener">http://blog.csdn.net/cjh16102377/article/details/48315327</a></p><h1 id="LeakCanary-使用"><a href="#LeakCanary-使用" class="headerlink" title="LeakCanary 使用"></a>LeakCanary 使用</h1><p><a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="noopener">https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/</a></p><h1 id="cocos-工程创建和调用"><a href="#cocos-工程创建和调用" class="headerlink" title="cocos 工程创建和调用"></a>cocos 工程创建和调用</h1><p><a href="http://blog.csdn.net/v_xchen_v/article/details/52733928" target="_blank" rel="noopener">http://blog.csdn.net/v_xchen_v/article/details/52733928</a></p><h1 id="android-Gradle-配置说明"><a href="#android-Gradle-配置说明" class="headerlink" title="android Gradle 配置说明"></a>android Gradle 配置说明</h1><p><a href="https://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/basic_project/simple_build_files.html" target="_blank" rel="noopener">https://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/basic_project/simple_build_files.html</a></p><h1 id="ios-objc-all-load-force-load区分"><a href="#ios-objc-all-load-force-load区分" class="headerlink" title="ios objc.all_load.force_load区分"></a>ios objc.all_load.force_load区分</h1><p>－ObjC：加了这个参数后，链接器就会把静态库中所有的Objective-C类和分类都加载到最后的可执行文件中</p><p>－all_load：会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到ld: duplicate symbol错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到-ObjC失效的情况下使用-force_load参数。</p><p>-force_load：所做的事情跟-all_load其实是一样的，但是-force_load需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;android-替换sdk重新打包&quot;&gt;&lt;a href=&quot;#android-替换sdk重新打包&quot; class=&quot;headerlink&quot; title=&quot;android  替换sdk重新打包:&quot;&gt;&lt;/a&gt;android  替换sdk重新打包:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
      <category term="技术探索" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>phassets视频转data</title>
    <link href="http://yoursite.com/2018/01/05/phassets%E8%A7%86%E9%A2%91%E8%BD%ACdata/"/>
    <id>http://yoursite.com/2018/01/05/phassets%E8%A7%86%E9%A2%91%E8%BD%ACdata/</id>
    <published>2018-01-05T07:45:44.000Z</published>
    <updated>2018-01-08T06:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*phassets 视频转data</span><br><span class="line">*/</span><br><span class="line">- (void)getVideoPathOrImageDataFromPHAsset:(PHAsset *)asset Key:(NSString *)key Complete:(ResultPath)result ImaComlete:(Result)imageResult &#123;</span><br><span class="line">NSArray *assetResources = [PHAssetResource assetResourcesForAsset:asset];</span><br><span class="line">PHAssetResource *resource;</span><br><span class="line"></span><br><span class="line">for (PHAssetResource *assetRes in assetResources) &#123;</span><br><span class="line">if (assetRes.type == PHAssetResourceTypePairedVideo ||</span><br><span class="line">assetRes.type == PHAssetResourceTypeVideo) &#123;</span><br><span class="line">resource = assetRes;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">NSString *fileName = @&quot;tempAssetVideo.mov&quot;;</span><br><span class="line">if (resource.originalFilename) &#123;</span><br><span class="line">fileName = resource.originalFilename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (asset.mediaType == PHAssetMediaTypeVideo || asset.mediaSubtypes == PHAssetMediaSubtypePhotoLive) &#123;</span><br><span class="line">PHVideoRequestOptions *options = [[PHVideoRequestOptions alloc] init];</span><br><span class="line">options.version = PHImageRequestOptionsVersionCurrent;</span><br><span class="line">options.deliveryMode = PHImageRequestOptionsDeliveryModeHighQualityFormat;</span><br><span class="line">PHAssetResourceRequestOptions *options1 = [PHAssetResourceRequestOptions new];</span><br><span class="line">//不支持icloud上传</span><br><span class="line">options1.networkAccessAllowed = NO;</span><br><span class="line">NSString *PATH_MOVIE_FILE = [NSTemporaryDirectory() stringByAppendingPathComponent:fileName];</span><br><span class="line">[[NSFileManager defaultManager] removeItemAtPath:PATH_MOVIE_FILE error:nil];</span><br><span class="line">[[PHAssetResourceManager defaultManager] writeDataForAssetResource:resource</span><br><span class="line">toFile:[NSURL fileURLWithPath:PATH_MOVIE_FILE]</span><br><span class="line">options:options1</span><br><span class="line">completionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">if (error) &#123;</span><br><span class="line">result(nil, nil);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//                                                                 result(PATH_MOVIE_FILE, fileName);</span><br><span class="line"></span><br><span class="line">NSError *__autoreleasing * error;</span><br><span class="line">int64_t _fileSize;</span><br><span class="line">NSError *error2 = nil;</span><br><span class="line">NSDictionary *fileAttr = [[NSFileManager defaultManager] attributesOfItemAtPath:PATH_MOVIE_FILE error:&amp;error2];</span><br><span class="line">if (error2 != nil) &#123;</span><br><span class="line">if (error != nil) &#123;</span><br><span class="line">*error = error2;</span><br><span class="line">&#125;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">_fileSize = [fileAttr fileSize];</span><br><span class="line">NSFileHandle *f = nil;</span><br><span class="line">NSData *d = nil;</span><br><span class="line">//                                                                 if (_fileSize &gt; 16 * 1024 * 1024) &#123;</span><br><span class="line">//                                                                     f = [NSFileHandle fileHandleForReadingAtPath:PATH_MOVIE_FILE];</span><br><span class="line">//                                                                     if (f == nil) &#123;</span><br><span class="line">//                                                                         if (error != nil) &#123;</span><br><span class="line">//                                                                             *error = [[NSError alloc] initWithDomain:PATH_MOVIE_FILE code:-4 userInfo:nil];</span><br><span class="line">//                                                                         &#125;</span><br><span class="line">//                                                                         return ;</span><br><span class="line">//                                                                     &#125; else &#123;</span><br><span class="line">//                                                                         if (d != nil) &#123;</span><br><span class="line">//                                                                             d= [d subdataWithRange:NSMakeRange(0, (long)_fileSize)];</span><br><span class="line">//                                                                             imageResult(d, fileName);</span><br><span class="line">//                                                                             return;</span><br><span class="line">//                                                                         &#125;</span><br><span class="line">//                                                                         [f seekToFileOffset:0];</span><br><span class="line">//                                                                         d = [f readDataOfLength:(long)_fileSize];</span><br><span class="line">//                                                                         imageResult(d, fileName);</span><br><span class="line">//                                                                         return;</span><br><span class="line">//                                                                     &#125;</span><br><span class="line">//                                                                 &#125; else &#123;</span><br><span class="line">d = [NSData dataWithContentsOfFile:PATH_MOVIE_FILE options:NSDataReadingMappedIfSafe error:&amp;error2];</span><br><span class="line">imageResult(d, fileName);</span><br><span class="line"></span><br><span class="line">if (error2 != nil) &#123;</span><br><span class="line">if (error != nil) &#123;</span><br><span class="line">*error = error2;</span><br><span class="line">&#125;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">//                                                                 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">&#125; else if (asset.mediaType == PHAssetMediaTypeImage) &#123;</span><br><span class="line">[self getImageFromPHAsset:asset Complete:imageResult];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>音乐篇--卡农</title>
    <link href="http://yoursite.com/2018/01/05/%E9%9F%B3%E4%B9%90%E7%AF%87-%E5%8D%A1%E5%86%9C/"/>
    <id>http://yoursite.com/2018/01/05/%E9%9F%B3%E4%B9%90%E7%AF%87-%E5%8D%A1%E5%86%9C/</id>
    <published>2018-01-05T07:41:42.000Z</published>
    <updated>2018-01-08T06:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卡农-–-电吉他版"><a href="#卡农-–-电吉他版" class="headerlink" title="卡农 – 电吉他版"></a>卡农 – 电吉他版</h1><p> <a href="https://bbs.guitarchina.com/thread-1931779-1-1.html" target="_blank" rel="noopener">https://bbs.guitarchina.com/thread-1931779-1-1.html</a></p><p><a href="http://www.jitaba.cn/pu/minyao/9172.html" target="_blank" rel="noopener">http://www.jitaba.cn/pu/minyao/9172.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;卡农-–-电吉他版&quot;&gt;&lt;a href=&quot;#卡农-–-电吉他版&quot; class=&quot;headerlink&quot; title=&quot;卡农 – 电吉他版&quot;&gt;&lt;/a&gt;卡农 – 电吉他版&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://bbs.guitarchina.com/thre
      
    
    </summary>
    
    
    
      <category term="音乐篇" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试题以及部分解答</title>
    <link href="http://yoursite.com/2018/01/05/IOS%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%A7%A3%E7%AD%94/"/>
    <id>http://yoursite.com/2018/01/05/IOS%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E8%A7%A3%E7%AD%94/</id>
    <published>2018-01-05T07:13:41.000Z</published>
    <updated>2020-03-09T16:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="runtime篇章"><a href="#runtime篇章" class="headerlink" title="runtime篇章"></a>runtime篇章</h1><h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h3 id="class-copyIvarList-amp-class-copyPropertyList区别"><a href="#class-copyIvarList-amp-class-copyPropertyList区别" class="headerlink" title="class_copyIvarList &amp; class_copyPropertyList区别"></a>class_copyIvarList &amp; class_copyPropertyList区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.class_copyIvarList:能够获取.h和.m中的所有属性以及大括号中声明的变量,获取的属性名称有下划线(大括号中的除外)。</span><br><span class="line">2.class_copyPropertyList:只能获取由property声明的属性,包括.m中的,获取的属性名称不带下划线。</span><br><span class="line">3.OC中没有真正的私有属性。</span><br></pre></td></tr></table></figure><h3 id="class-rw-t-和-class-ro-t-的区别"><a href="#class-rw-t-和-class-ro-t-的区别" class="headerlink" title="class_rw_t 和 class_ro_t 的区别"></a>class_rw_t 和 class_ro_t 的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">细看两个结构体的成员变量会发现很多相同的地方,他们都存放着当前类的属性、实例变量、方法、协议等等。区别在于:</span><br><span class="line">class_ro_t: class_ro_t存放的是编译期间就确定的;</span><br><span class="line">class_rw_t: 而class_rw_t是在runtime时才确定,它会先将class_ro_t的内容拷贝过去,然后再将当前类的分类的这些属性、方法等...”</span><br></pre></td></tr></table></figure><h3 id="category如何被加载的-两个category的load方法的加载顺序，两个category的同名方法的加载顺序"><a href="#category如何被加载的-两个category的load方法的加载顺序，两个category的同名方法的加载顺序" class="headerlink" title="category如何被加载的,两个category的load方法的加载顺序，两个category的同名方法的加载顺序"></a>category如何被加载的,两个category的load方法的加载顺序，两个category的同名方法的加载顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.category是在运行期间加载的(添加到类的),他的方法会放到mateclass列表里面;</span><br><span class="line">2.mateclass在方法列表搜索方法名时候只要找到想找的就会ruturn,不会往下走了,</span><br><span class="line">3.所以先加载类的load方法 在加载category的 所以后一个category的load会覆盖前一个.</span><br></pre></td></tr></table></figure><h3 id="category-amp-extension区别，能给NSObject添加Extension吗，结果如何"><a href="#category-amp-extension区别，能给NSObject添加Extension吗，结果如何" class="headerlink" title="category &amp; extension区别，能给NSObject添加Extension吗，结果如何"></a>category &amp; extension区别，能给NSObject添加Extension吗，结果如何</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.category是添加原先类的所没有的方法,原则上只能添加方法不能添加属性因为添加了也不会有get set方法(分类的结构体中没有属性列表,可手动实现get/set方法),在运行期开始加载  </span><br><span class="line">2.extension是对原来类的私有方法和属性的重新实现(必须要实现),不能添加声明,在编译器开始加载</span><br></pre></td></tr></table></figure><h3 id="消息转发机制，消息转发机制和其他语言的消息机制优劣对比"><a href="#消息转发机制，消息转发机制和其他语言的消息机制优劣对比" class="headerlink" title="消息转发机制，消息转发机制和其他语言的消息机制优劣对比"></a>消息转发机制，消息转发机制和其他语言的消息机制优劣对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objc_msgSend 方法先在本类方法列表找-&gt;父类-&gt;实现代码</span><br><span class="line">都找不到的话就采用消息转发</span><br><span class="line">1.动态方法解析: resolveInstanceMethod 在本类实现动态实现类方法或者对象方法的添加</span><br><span class="line">2.备援接受者: forwardingTargetForSelector 在其他类里找能响应的动态添加方法实现</span><br><span class="line">3.消息转发: methodSignatureForSelector 获取方法签名 methodSignatureForSelector签名包装成Invocation传入看是否能响应</span><br><span class="line">4.崩溃</span><br></pre></td></tr></table></figure><h3 id="在方法调用的时候，方法查询-gt-动态解析-gt-消息转发-之前做了什么"><a href="#在方法调用的时候，方法查询-gt-动态解析-gt-消息转发-之前做了什么" class="headerlink" title="在方法调用的时候，方法查询-&gt; 动态解析-&gt; 消息转发 之前做了什么"></a>在方法调用的时候，方法查询-&gt; 动态解析-&gt; 消息转发 之前做了什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂时未找到答案,但是估计应该是首先需要通过msgsend方法遍历当前类父类的方法列表</span><br></pre></td></tr></table></figure><h3 id="IMP、SEL、Method的区别和使用场景"><a href="#IMP、SEL、Method的区别和使用场景" class="headerlink" title="IMP、SEL、Method的区别和使用场景"></a>IMP、SEL、Method的区别和使用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.SEL:是selector”的一个类型，表示一个方法的名字,类成员方法的指针，但和C的函数指针还不一样，函数指针直接保存了方法的地址，但是SEL只是方法编号。</span><br><span class="line">2.IMP:函数指针，保存了方法地址。</span><br><span class="line">3.method是一种类型,这种类型与selector和实现(implementation)相关</span><br><span class="line">4.isa：isa是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。所以我们可以把类方法看做是其isa指向的元类的实例方法</span><br><span class="line"></span><br><span class="line"> 一个类（Class）持有一个分发表，在运行期分发消息，表中的每一个实体代表一个方法（Method），它的名字叫做选择子（SEL），对应着一种方法实现（IMP）。</span><br></pre></td></tr></table></figure><h3 id="说说消息转发机制的优劣"><a href="#说说消息转发机制的优劣" class="headerlink" title="说说消息转发机制的优劣"></a>说说消息转发机制的优劣</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点: 就是安全性高,逐一进行查找,并且可以动态进行添加</span><br><span class="line">缺点: 就是耗时,如果需要在最后一级转发层的话需要每一次操作都递归方法列表</span><br></pre></td></tr></table></figure><h3 id="load、initialize方法的区别什么？在继承关系中他们有什么区别"><a href="#load、initialize方法的区别什么？在继承关系中他们有什么区别" class="headerlink" title="load、initialize方法的区别什么？在继承关系中他们有什么区别"></a>load、initialize方法的区别什么？在继承关系中他们有什么区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调用时序: superload-&gt;subload-&gt;main-&gt;superinit-&gt;subinit</span><br><span class="line">load的调用顺序为：父类load ---&gt; 子类load ---&gt; Category的load；而Category的initialize直接就覆盖了父类的initialize</span><br><span class="line">load方法会在加载类的时候就被调用，也就是 ios 应用启动的时候，就会加载所有的类，就会调用每个类的 + load 方法。</span><br><span class="line">initialize在这个类第一次被调用的时候比如[[class alloc]init]会调用一次initialize方法,一般用于初始化全局变量或静态变量</span><br><span class="line">init而方法是只要这个类被调用,就会调用这个init方法</span><br><span class="line">继承的区别</span><br><span class="line">load和initialize方法都不用显示的调用父类的方法而是自动调用，</span><br><span class="line">initialize :即使子类没有initialize方法也会调用父类的方法，走两遍superinit</span><br><span class="line">load:而load方法则不会调用父类;只走一遍superload</span><br></pre></td></tr></table></figure><h3 id="weak的实现原理？"><a href="#weak的实现原理？" class="headerlink" title="weak的实现原理？"></a>weak的实现原理？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">runtime的时候系统会建立一个储存这个对象所有的weak指针的一个表(hash表) ,key就是对象的地址 value是weak指针的地址数组</span><br><span class="line">1.初始化时: 会调用objc_initweak函数 初始化一个新的weak指针指向对象地址</span><br><span class="line">2.添加引用时: 还是objc_initweak函数调用objc_storeweak函数, 更新新指针指向,创建新的弱引用表</span><br><span class="line">3释放是,调用clearDeallocating函数根据对象地址获取所有的weak指针地址数组, 遍历数组把数据设为nil,然后清理对象记录</span><br></pre></td></tr></table></figure><h3 id="SideTable的结构是什么样的"><a href="#SideTable的结构是什么样的" class="headerlink" title="SideTable的结构是什么样的"></a>SideTable的结构是什么样的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sidertables全局哈希表里面是每一个sidertable key是每一个对象的地址</span><br><span class="line">散列表是内存管理的方案之一 里面包含了引用计数表和弱引用表,和一个自旋锁</span><br><span class="line">1.引用计数表(map): 通过对象地址key获取该对象的引用计数</span><br><span class="line">2.弱引用表(哈希):通过对象地址key获取weak对象列表</span><br><span class="line">3.自旋锁 防止适用于锁时间短的情况,避免数据错误</span><br></pre></td></tr></table></figure><h3 id="alloc-retain-release-dealloc内部实现原理解析"><a href="#alloc-retain-release-dealloc内部实现原理解析" class="headerlink" title="alloc retain release dealloc内部实现原理解析"></a>alloc retain release dealloc内部实现原理解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nszone这个类根据对象的目的 对象的大小提供内存管理的效率;</span><br><span class="line">alloc类方法用struct obj_layout中的retained来保存引用计数，并将其写入对象的内存头部，该内存块全部置0后返回。</span><br><span class="line">1.在OC的对象中存有引用计数这一整数值</span><br><span class="line">2.调用alloc或是retain方法后，引用计数值+1</span><br><span class="line">3.调用release后，引用计数值-1。</span><br><span class="line">4.引用计数值为0后，调用dealloc方法废弃对象</span><br></pre></td></tr></table></figure><h3 id="关联对象的应用？系统如何实现关联对象的"><a href="#关联对象的应用？系统如何实现关联对象的" class="headerlink" title="关联对象的应用？系统如何实现关联对象的"></a>关联对象的应用？系统如何实现关联对象的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">category原则上只能扩展方法无法扩展属性因为就算声明了也不会生成set/get方法 这个时候关联对象就用上了</span><br><span class="line">原理: @property正常情况属性就会自动关联到对象上</span><br><span class="line">但是在分类中实现就需要手动的写入set/get方法 与该类进行关联</span><br><span class="line">1.objc_setAssociatedObject: 以键值对的方式添加关联对象new_value!=nil</span><br><span class="line">2.objc_getAssociatedObject: 根据key(方法)获取关联对象</span><br><span class="line">3.objc_removeAssociatedObjects: 删除所有的关联对象new_value == nil</span><br><span class="line">具体实现</span><br><span class="line">ObjcAssociation 关联对象的类:</span><br><span class="line">1.创建一个关联类的对象</span><br><span class="line">2.给new_value 进行retain或者是copy</span><br><span class="line">3.创建一个关联manger并获取关联对象的哈希表</span><br><span class="line">4.根据对象查找和这个哈希表</span><br><span class="line">5.如果没有找到就新建一个哈希表在建一个关联对象放到哈希中</span><br><span class="line">6.查找这个哈希表看kay是不是存在没有就新增</span><br><span class="line">7.删除的时候就释放关联对象new_value的值</span><br></pre></td></tr></table></figure><h3 id="关联对象如何实现weak属性"><a href="#关联对象如何实现weak属性" class="headerlink" title="关联对象如何实现weak属性"></a>关联对象如何实现weak属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(void)setWeakvalue:(NSObject *)weakvalue &#123;</span><br><span class="line">    __weak typeof(weakvalue) weakObj = weakvalue;</span><br><span class="line">    typeof(weakvalue) (^block)() = ^()&#123;</span><br><span class="line">        return weakObj;</span><br><span class="line">    &#125;;</span><br><span class="line">    objc_setAssociatedObject(self, weakValueKey, block, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line">-(NSObject *)weakvalue &#123;</span><br><span class="line">    id (^block)() = objc_getAssociatedObject(self, weakValueKey);</span><br><span class="line">    return block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autoreleasepool的原理？所使用的的数据结构是什么"><a href="#Autoreleasepool的原理？所使用的的数据结构是什么" class="headerlink" title="Autoreleasepool的原理？所使用的的数据结构是什么"></a>Autoreleasepool的原理？所使用的的数据结构是什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">autorelease对象就是没有经过retain copy alloc (临时对象)</span><br><span class="line">在gcd 主线程中是自动开启autoreleasepool的 在子线程中因为默认是runloop是关闭的 所以需要手动autoreleasepool 防止临时对象太多 造成内存暴涨</span><br><span class="line">原理: AutoreleasePoolPage</span><br><span class="line">1.简单说是双向链表，每张链表头尾相接，有 parent、child指针</span><br><span class="line">2.每创建一个池子，会在首部创建一个 哨兵 对象,作为标记</span><br><span class="line">3.最外层池子的顶端会有一个next指针。当链表容量满了，就会在链表的顶端，并指向下一张表 (妈的 我是没看明白)</span><br></pre></td></tr></table></figure><h3 id="ARC的实现原理？"><a href="#ARC的实现原理？" class="headerlink" title="ARC的实现原理？"></a>ARC的实现原理？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">retaincount机制, 在每次runloop的时候都会检查对象的retaincount 如果是0就不要了,</span><br><span class="line">原理: </span><br><span class="line">1.arc会自动处理retain release autorelease操作 但是我们没办法主动调用</span><br><span class="line">2.arc是通过c语言层更高效的处理内存事件的比如objc_retain</span><br><span class="line">3.命名时候必须遵循命名规则 alloc new copy 等 arc通过命名约定进行内存管理标准化</span><br><span class="line">4.arc管理对象的生命周期是在合适的地方保留 释放, 方法创建的对象在方法中自动释放 类对象在dealloc中释放</span><br><span class="line">5.arc内存管理语义可以通过修饰符致命</span><br><span class="line">6.只对oc有作用 对其他的没用</span><br></pre></td></tr></table></figure><h3 id="ARC下对retain-amp-release做了哪些优化"><a href="#ARC下对retain-amp-release做了哪些优化" class="headerlink" title="ARC下对retain &amp; release做了哪些优化"></a>ARC下对retain &amp; release做了哪些优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARC优化器负责移除多余的retain和release语句，确保生成的代码运行速度高于手动引用计数的代码。</span><br></pre></td></tr></table></figure><h3 id="RunLoop-是什么"><a href="#RunLoop-是什么" class="headerlink" title="RunLoop 是什么"></a>RunLoop 是什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runloop是通过内部维护的事件循环(不是死循环)对事件/消息进行管理的对象;</span><br><span class="line">有工作的时候就工作,没工作的时候就休眠减少资源占用</span><br></pre></td></tr></table></figure><h3 id="ARC下哪些情况会造成内存泄漏"><a href="#ARC下哪些情况会造成内存泄漏" class="headerlink" title="ARC下哪些情况会造成内存泄漏"></a>ARC下哪些情况会造成内存泄漏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.循环引用(delegate,block,timer)</span><br><span class="line">2.死循环</span><br></pre></td></tr></table></figure><h3 id="Method-Swizzle注意事项"><a href="#Method-Swizzle注意事项" class="headerlink" title="Method Swizzle注意事项"></a>Method Swizzle注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swizzle  : runtime  提供让我们在运行屎替换一有的方法来实现我们自己的需求</span><br><span class="line">method_exchangeImplementations 主要用到这个交换函数指针这个方法, 注意点如下:</span><br><span class="line"> 需要注意被替换方的安全性因为objc_msgsend原理会搞不清你传入的对象是谁 运用method_setImplementation方法提供新的函数代替我们要替换的方法</span><br></pre></td></tr></table></figure><h3 id="atomic与nonatomic的区别以及各自功能"><a href="#atomic与nonatomic的区别以及各自功能" class="headerlink" title="atomic与nonatomic的区别以及各自功能"></a>atomic与nonatomic的区别以及各自功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">atomic 是在属性的set/get方法上加上自旋锁 保证set/get方法安全 但是其他方法不保证</span><br><span class="line">nonatomic 是不加自旋锁 也不安全</span><br></pre></td></tr></table></figure><h3 id="iOS-中内省的几个方法有哪些？内部实现原理是什么"><a href="#iOS-中内省的几个方法有哪些？内部实现原理是什么" class="headerlink" title="iOS 中内省的几个方法有哪些？内部实现原理是什么"></a>iOS 中内省的几个方法有哪些？内部实现原理是什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.判断对象类型:</span><br><span class="line">-(BOOL) isKindOfClass: 判断是否是这个类或者这个类的子类的实例</span><br><span class="line">-(BOOL) isMemberOfClass: 判断是否是这个类的实例</span><br><span class="line"></span><br><span class="line">2. 判断对象or类是否有这个方法</span><br><span class="line">-(BOOL) respondsToSelector: 判读实例是否有这样方法</span><br><span class="line">+(BOOL) instancesRespondToSelector: 判断类是否有这个方法</span><br><span class="line"></span><br><span class="line">3. object_getClass:获得的是isa的指向</span><br><span class="line">self.class:当self是实例对象的时候，返回的是类对象，否则则返回自身</span><br><span class="line">类方法class，返回的是self，所以当查找meta class时，需要对类对象调用object_getClass方法</span><br><span class="line"></span><br><span class="line">实现原理pass 我日</span><br></pre></td></tr></table></figure><h3 id="class、objc-getClass、object-getclass-方法有什么区别"><a href="#class、objc-getClass、object-getclass-方法有什么区别" class="headerlink" title="class、objc_getClass、object_getclass 方法有什么区别"></a>class、objc_getClass、object_getclass 方法有什么区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. objc_getClass: 参数是类名的字符串，返回的就是这个类的类对象；</span><br><span class="line">2. object_getClass: 参数是id类型，它返回的是这个id的isa指针所指向的Class，如果传参是Class，则返回该Class的metaClass</span><br><span class="line">3. self.class :self是实例对象的时候返回的是类的对象 ;类方法.class,返回的是self 所以当要查找metaclass是需要对类对象调用object_getclass</span><br></pre></td></tr></table></figure><h2 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h2><h1 id="NSNotification相关"><a href="#NSNotification相关" class="headerlink" title="NSNotification相关"></a>NSNotification相关</h1><p> <a href="https://juejin.im/entry/57fb07c30bd1d00058c6465c" target="_blank" rel="noopener">https://juejin.im/entry/57fb07c30bd1d00058c6465c</a> 这个文章比较简单明了 ojbk</p><h3 id="NSNotification实现原理"><a href="#NSNotification实现原理" class="headerlink" title="NSNotification实现原理"></a>NSNotification实现原理</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. nsnotifications 内部含有多个maptable(发送者和监听者都要在同一个线程):</span><br><span class="line">2. 添加观察这的时候: 将 各个参数分别添加到对应的map中 其中包括name, 座位key, value就是是一个方法name+objet的tab 根据各个参数依次进行储存, 没有name和喝objet的通知 会添加到一个单独的map中</span><br><span class="line">3. 发送广播的时候: 会根据传入的name一次遍历生成的广播中心的各个列表, 首先将没有name和object的表中的都加入到待发送的数组里, 然后添加符合name需求的 再就是符合name和object参数需求的都依次加入数组中, 然后在吧数组中的对象依次进行发送;</span><br><span class="line">4. 移除广播就是记录下来的name通知从表单中删除掉</span><br></pre></td></tr></table></figure><h3 id="通知的发送时同步的，还是异步的"><a href="#通知的发送时同步的，还是异步的" class="headerlink" title="通知的发送时同步的，还是异步的"></a>通知的发送时同步的，还是异步的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 发送者和接受者是必须在同一个线程中的</span><br><span class="line">2. 但是通知发送后查找注册者的过程是一个异步过程</span><br></pre></td></tr></table></figure><h3 id="NSNotificationCenter接受消息和发送消息是在一个线程里吗？如何异步发送消息"><a href="#NSNotificationCenter接受消息和发送消息是在一个线程里吗？如何异步发送消息" class="headerlink" title="NSNotificationCenter接受消息和发送消息是在一个线程里吗？如何异步发送消息"></a>NSNotificationCenter接受消息和发送消息是在一个线程里吗？如何异步发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将发送消息的放到建一个异步线程放进去或者利用notificationsqueue机制</span><br></pre></td></tr></table></figure><h3 id="NSNotificationQueue和runloop的关系"><a href="#NSNotificationQueue和runloop的关系" class="headerlink" title="NSNotificationQueue和runloop的关系"></a>NSNotificationQueue和runloop的关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. nsnotificationqueue是notificationscanter的一个缓冲池 他会将发送过来的通知放到缓冲池中等到runloop结束或者空闲的时候在发送(当然发送状态是可以自己根据参数选定是空闲时间发还是马上发送等), 也可以避免没必要的通知重复发送</span><br><span class="line">2. nsnotificationqueue 会将在第一位通知首先发出</span><br><span class="line">3. 每一个线程都有一个nsnotificationqueue 但是可以根据自己需求多见几个</span><br><span class="line">runloop 上文有提到</span><br></pre></td></tr></table></figure><h3 id="页面销毁时不移除通知会崩溃吗"><a href="#页面销毁时不移除通知会崩溃吗" class="headerlink" title="页面销毁时不移除通知会崩溃吗"></a>页面销毁时不移除通知会崩溃吗</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当通知方法实现涉及到ui改动等情况的时候会出现crash</span><br><span class="line"></span><br><span class="line">多次添加/移除同一个通知会是什么结果？</span><br><span class="line">多次添加会多次响应 </span><br><span class="line">多次移除会你妈的crash</span><br></pre></td></tr></table></figure><h3 id="下面的方式能接收到通知吗？为什么"><a href="#下面的方式能接收到通知吗？为什么" class="headerlink" title="下面的方式能接收到通知吗？为什么"></a>下面的方式能接收到通知吗？为什么</h3><p>// 发送通知<br><figure class="highlight plain"><figcaption><span>defaultCenter] addObserver:self selector:@selector(handleNotification:) name:@"TestNotification" object:@1];</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 接收通知</span><br><span class="line">[NSNotificationCenter.defaultCenter postNotificationName:@&quot;TestNotification&quot; object:nil];</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">妈的没时间试了 我猜是可以的 他是根据名字逐个表单进行查找的;</span><br></pre></td></tr></table></figure><h2 id="—-2"><a href="#—-2" class="headerlink" title="—"></a>—</h2><h1 id="Runloop-amp-KVO相关"><a href="#Runloop-amp-KVO相关" class="headerlink" title="Runloop &amp; KVO相关"></a>Runloop &amp; KVO相关</h1><h3 id="app如何接收到触摸事件的"><a href="#app如何接收到触摸事件的" class="headerlink" title="app如何接收到触摸事件的"></a>app如何接收到触摸事件的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 手机屏幕收到点击, 触发iokit框架方法</span><br><span class="line">2. iokit 生成iohidevent对象传递给桌面系统springboad</span><br><span class="line">3. springboad触发app进程主线程runloop的source1的时间回调</span><br><span class="line">4. source1回调出发source0回到将iohidevent对象封装成uievent对象,此时app对点击事件正式开始响应</span><br><span class="line">5. source0回调将事件添加到appdelegate对象的响应对象中, 开始寻找合适的时间 和 响应对象</span><br><span class="line">6. 找到想响应对象就做出响应 然后点击事件释放</span><br><span class="line">7. 未找到响应对象就不响应 点击时间释放</span><br><span class="line">8. runloop看还有没有逼得是要做 没有的话就休息 等待新的时间被唤醒</span><br></pre></td></tr></table></figure><h3 id="为什么只有主线程的runloop是开启的"><a href="#为什么只有主线程的runloop是开启的" class="headerlink" title="为什么只有主线程的runloop是开启的"></a>为什么只有主线程的runloop是开启的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. runloop是寄生于线程下面的消息循环机制, 他能保证线程的存货 而不是执行完成任务就消亡</span><br><span class="line">2. 从源码来看 任意一个子线程runloop都会保证主线程runloop的存在</span><br></pre></td></tr></table></figure><h3 id="为什么只在主线程刷新UI"><a href="#为什么只在主线程刷新UI" class="headerlink" title="为什么只在主线程刷新UI"></a>为什么只在主线程刷新UI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. uikit是个线程不是很安全的类, uiview对象的属性如果放到异步线程操作会出现读写冲突 如果加锁的话会消耗大量资源</span><br><span class="line">2. appdelegate类是在主线程初始化的 也就是说事件的传递也是在主线程, 所以uiview需要在主线程上响应</span><br><span class="line">3. 图片的渲染需要在屏幕每秒刷新60次, 异步线程无法保证及时响应更新渲染画面</span><br></pre></td></tr></table></figure><h3 id="PerformSelector和runloop的关系"><a href="#PerformSelector和runloop的关系" class="headerlink" title="PerformSelector和runloop的关系"></a>PerformSelector和runloop的关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. performselector 是runloop的时间处理员</span><br><span class="line">2. runloop有三个必要参数, slector, timer, mode</span><br><span class="line">3. 当一个线程结束了 runloop就会销毁, 那么perforselector也会随之释放</span><br></pre></td></tr></table></figure><h3 id="如何使线程保活"><a href="#如何使线程保活" class="headerlink" title="如何使线程保活"></a>如何使线程保活</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 子线程需要获取当前的runloop</span><br><span class="line">2. 让这个runloop一直有事干(while ,for, 或者runlooprun)</span><br></pre></td></tr></table></figure><h2 id="—-3"><a href="#—-3" class="headerlink" title="—"></a>—</h2><h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p>kvo实现原理 <a href="https://juejin.im/post/5c2189dee51d454517589c8b" target="_blank" rel="noopener">https://juejin.im/post/5c2189dee51d454517589c8b</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. KVO 提供一种(观察者设计模式)机制，指定一个被观察对象(例如 A 类)，当对象某个属性(例如 A 中的字符串 name)发生更改时，对象会获得通知，并作出相应处理</span><br><span class="line">2. 到要监听观察一个对象A时, kvo就会动态的(runtime, isa 混写（isa-swizzling)创建一个对象a的类的子类, </span><br><span class="line">3. 在子类中重新需要被观察的属性的keypath的setter方法, 然后setter方法负责通知观察这属性的变化情况</span><br><span class="line">&#123;人家说的好:</span><br><span class="line"> 1.利用RuntimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类</span><br><span class="line"> 2. 当修改instance对象的属性时，会调用Foundation的_NSSetXXXValueAndNotify函数 willChangeValueForKey:</span><br><span class="line">3. 父类原来的setter didChangeValueForKey: 内部会触发监听器（Oberser）的监听方法(observeValueForKeyPath:ofObject:change:context:）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如何手动关闭kvo"><a href="#如何手动关闭kvo" class="headerlink" title="如何手动关闭kvo"></a>如何手动关闭kvo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. automaticallyNotifiesObserversForKey 取消系统的自动监听</span><br><span class="line">2. 调用removeObserver:方法 取消某个类的监听</span><br></pre></td></tr></table></figure><h3 id="通过KVC修改属性会触发KVO么"><a href="#通过KVC修改属性会触发KVO么" class="headerlink" title="通过KVC修改属性会触发KVO么"></a>通过KVC修改属性会触发KVO么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kvc原理</span><br><span class="line">   •    如果可以访问会按照 _key、_isKey、key、iskey的顺序查找成员变量</span><br><span class="line">   •    找到直接赋值</span><br><span class="line">   •    未找到报错NSUnkonwKeyException错误</span><br><span class="line">因为调用了set方法 所以会触发kvo</span><br></pre></td></tr></table></figure><h3 id="哪些情况下使用kvo会崩溃，怎么防护崩溃"><a href="#哪些情况下使用kvo会崩溃，怎么防护崩溃" class="headerlink" title="哪些情况下使用kvo会崩溃，怎么防护崩溃"></a>哪些情况下使用kvo会崩溃，怎么防护崩溃</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 注册和移除次数不匹配 (移除未注册的, 多次移除同一个观察者)</span><br><span class="line">2. 观察对象提前释放 但是kvo未移除</span><br><span class="line">3. 没有实现observeValueForKeyPath:ofObject:change:context方法</span><br><span class="line">4. keypath为nil</span><br></pre></td></tr></table></figure><h3 id="kvo的优缺点"><a href="#kvo的优缺点" class="headerlink" title="kvo的优缺点"></a>kvo的优缺点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">优点 :</span><br><span class="line">1.能够提供一种简单的方法实现两个对象间的同步。例如：model和view之间同步；</span><br><span class="line">2.能够对非我们创建的对象，即内部对象的状态改变作出响应，而且不需要改变内部对象（SDK对象）的实现；</span><br><span class="line">3.能够提供观察的属性的最新值以及先前值；</span><br><span class="line">4.用key paths来观察属性，因此也可以观察嵌套对象；</span><br><span class="line">5.完成了对观察对象的抽象，因为</span><br><span class="line">缺点 : </span><br><span class="line">1.我们观察的属性必须使用strings来定义。因此在编译器不会出现警告以及检查；</span><br><span class="line">2.对属性重构将导致我们的观察代码不再可用；</span><br><span class="line">3.复杂的“IF”语句要求对象正在观察多个值。这是因为所有的观察代码通过一个方法来指向；</span><br><span class="line">4.当释放观察者时不需要移除观察者。</span><br></pre></td></tr></table></figure><h2 id="—-4"><a href="#—-4" class="headerlink" title="—"></a>—</h2><h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h1><p><a href="https://juejin.im/post/5b0181e15188254270643e88" target="_blank" rel="noopener">https://juejin.im/post/5b0181e15188254270643e88</a>    掘金网址真是个好地方 全是面试所需</p><h3 id="block的内部实现，结构体是什么样的"><a href="#block的内部实现，结构体是什么样的" class="headerlink" title="block的内部实现，结构体是什么样的"></a>block的内部实现，结构体是什么样的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. block是oc的一个对象</span><br><span class="line">2. 局部变量进入block中时 block是将值传递到内部, 静态变量是讲指针传递到内部, 全局变量传递 因为哪里都可以访问的到, 类的属性其实是将类的对象 和 方法选择器 _cmd传递到内部</span><br><span class="line">3. 将oc转成c++语言时(xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m) block其实主要是一个__main_block_impl_0结构体 这个结构体内部还含有两个结构体 一个是承接block函数代码款的结构体 一个是承接block大小和地址等描述的结构体</span><br></pre></td></tr></table></figure><h3 id="block是类吗，有哪些类型"><a href="#block是类吗，有哪些类型" class="headerlink" title="block是类吗，有哪些类型"></a>block是类吗，有哪些类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. block指向NSBlock类的子类, nsblock类又是nsobject类的子类</span><br><span class="line">有三种类型:</span><br><span class="line">1. __NSGlobalBlock__ （ _NSConcreteGlobalBlock ） 存放在数据段中 (全局变量, 静态变量知道程序结束才回收)</span><br><span class="line">2. __NSStackBlock__ （ _NSConcreteStackBlock ） 存放在栈中 (局部变量 系统自动分配内存, 当局部变量作用域执行完后自动回收)</span><br><span class="line">3.  __NSMallocBlock__ （ _NSConcreteMallocBlock 存放在堆中(动态分配内存, alloc出来的内存 需要开发自行管理内存)</span><br></pre></td></tr></table></figure><h3 id="一个int变量被-block-修饰与否的区别？block的变量截获"><a href="#一个int变量被-block-修饰与否的区别？block的变量截获" class="headerlink" title="一个int变量被 __block 修饰与否的区别？block的变量截获"></a>一个int变量被 __block 修饰与否的区别？block的变量截获</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 局部变量: 原本是直接将值复制到block中使用 __block修饰之后就是引用了地址起到了修改值之后外部数据也跟着改变</span><br><span class="line">2. 全局变量: 本来就是地址 所以没区别</span><br></pre></td></tr></table></figure><h3 id="block在修改NSMutableArray，需不需要添加-block"><a href="#block在修改NSMutableArray，需不需要添加-block" class="headerlink" title="block在修改NSMutableArray，需不需要添加__block"></a>block在修改NSMutableArray，需不需要添加__block</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">•    __block 修饰的非集合、集合对象都可以赋值</span><br><span class="line">•    没有__block修饰的集合可以修改其中的对象</span><br><span class="line">•    当前类属性没有__block修饰的时候也可以赋值</span><br></pre></td></tr></table></figure><h3 id="block怎么进行内存管理的"><a href="#block怎么进行内存管理的" class="headerlink" title="block怎么进行内存管理的"></a>block怎么进行内存管理的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. NSGlobalBlock全局块 : 不会释放</span><br><span class="line">2. NSStackBlock栈块: retian release无效 会在作用域结束自动回收, copy却可以将block复制到堆区,让block长期保留</span><br><span class="line">3. NSMallocBlock 堆块:  retain / release可以让引用计数+-1, copy不会生成新的block 只会引用计数+1</span><br></pre></td></tr></table></figure><h3 id="block可以用strong修饰吗"><a href="#block可以用strong修饰吗" class="headerlink" title="block可以用strong修饰吗"></a>block可以用strong修饰吗</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以</span><br><span class="line">block默认是在栈区保存的 但是这个就像局部变量一样用完就没, 但是用strong就相当于运行了[block copy];方法 将block从栈复制到了堆上</span><br></pre></td></tr></table></figure><h3 id="解决循环引用时为什么要用strong、weak修饰"><a href="#解决循环引用时为什么要用strong、weak修饰" class="headerlink" title="解决循环引用时为什么要用strong、weak修饰"></a>解决循环引用时为什么要用<strong>strong、</strong>weak修饰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. __weak修饰的变量引用计数不会+1, 这就不会造成强引用儿不会导致无法释放, </span><br><span class="line">2. __strong修饰的变量会导致引用计数+1, 这就会造成强引用 但是同时这个变量也减少了提前释放的标准</span><br><span class="line">所以当__weak避免强引用的时候 可能会存在对象提前释放的情况 这样block就无法进行操作了, 所以在block内在__strong修饰一下之前__weak的变量就不会造成变量的提前释放了</span><br></pre></td></tr></table></figure><h3 id="block发生copy时机"><a href="#block发生copy时机" class="headerlink" title="block发生copy时机"></a>block发生copy时机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 调用block的copy函数时;</span><br><span class="line">2. Block作为函数返回值返回时;</span><br><span class="line">3. 将Block赋值给附有__strong修饰符id类型的类或者Block类型成员变量时;</span><br><span class="line">4. 方法中含有usingBlock的Cocoa框架方法或者GCD的API中传递Block时;</span><br></pre></td></tr></table></figure><h3 id="Block访问对象类型的auto变量时，在ARC和MRC下有什么区别"><a href="#Block访问对象类型的auto变量时，在ARC和MRC下有什么区别" class="headerlink" title="Block访问对象类型的auto变量时，在ARC和MRC下有什么区别"></a>Block访问对象类型的auto变量时，在ARC和MRC下有什么区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 对于非ARC下，为了防止循环引用，我们使用__block来修饰在Block中使用的对象。</span><br><span class="line">2.对于ARC下，为了防止循环引用，我们使用__weak来修饰在Block中使用的对象。</span><br><span class="line">3.原理就是：ARC中，Block中如果引用了__strong修饰符的自动变量，则相当于Block对该对象的引用计数+1。</span><br></pre></td></tr></table></figure><h2 id="—-5"><a href="#—-5" class="headerlink" title="—"></a>—</h2><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h3 id="iOS开发中有多少类型的线程？分别对比"><a href="#iOS开发中有多少类型的线程？分别对比" class="headerlink" title="iOS开发中有多少类型的线程？分别对比"></a>iOS开发中有多少类型的线程？分别对比</h3><pre><code>•    NSThread : 苹果封装的面向对象的要方案, 直接控制线程对象, 直观,方便, 对线程的各个属性获取比较全面, 但是需要手动的控制线程的生命周期•    GCD: 苹果对多核并发提出的解决方案,会自动合理的运用cpu内核, 运用C语言和block, 代码直观, 也不需要管理生命周期, 但是block会造成强引用, 线程异步, 同步, 队列串行, 并行各自结合容易乱•    NSOperation &amp; NSOperationQueue: 苹果对gcd的封装, 面向对象, 可以通过消息互发 和 block实现线程代码, 在拥有gcd的有点的同时也不需要管复杂的同步, 异步, 串行,并行(用最大并发线程数参数代替了),可以合理安排队列</code></pre><h3 id="GCD有哪些队列，默认提供哪些队列"><a href="#GCD有哪些队列，默认提供哪些队列" class="headerlink" title="GCD有哪些队列，默认提供哪些队列"></a>GCD有哪些队列，默认提供哪些队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">串行队列, 并行队列(只有在异步才有效),全局队列</span><br></pre></td></tr></table></figure><h3 id="GCD有哪些方法api"><a href="#GCD有哪些方法api" class="headerlink" title="GCD有哪些方法api"></a>GCD有哪些方法api</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. //创建自定义并行队列</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    //创建全局队列</span><br><span class="line">    dispatch_queue_t globQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.// 串行队列的创建方法</span><br><span class="line">dispatch_queue_t queue= dispatch_queue_create(&quot;test.queue&quot;, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.// 使用主队列（跟主线程相关联的队列）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">4.// 主队列是GCD自带的一种特殊的串行队列,放在主队列中的任务，都会放到主线程中执行</span><br><span class="line">dispatch_queue_t queue = dispatch_get_main_queue();</span><br><span class="line">/* NSLog(@&quot;执行系统提供的并行队列，这个队列有优先级，可以手动设置&quot;);</span><br><span class="line">     #define DISPATCH_QUEUE_PRIORITY_HIGH 2</span><br><span class="line">     #define DISPATCH_QUEUE_PRIORITY_DEFAULT 0</span><br><span class="line">     #define DISPATCH_QUEUE_PRIORITY_LOW (-2)</span><br><span class="line">     #define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    dispatch_queue_t global_queue_background = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);</span><br><span class="line">    dispatch_async(global_queue_background, ^&#123;</span><br><span class="line">        NSLog(@&quot;我是第四：DISPATCH_QUEUE_PRIORITY_BACKGROUND&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_queue_t global_queue_low = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);</span><br><span class="line">    dispatch_async(global_queue_low, ^&#123;</span><br><span class="line">        NSLog(@&quot;我是第三：DISPATCH_QUEUE_PRIORITY_LOW&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_queue_t global_queue_default = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">    dispatch_async(global_queue_default, ^&#123;</span><br><span class="line">        NSLog(@&quot;我是第二：DISPATCH_QUEUE_PRIORITY_DEFAULT&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_queue_t global_queue_High = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span><br><span class="line">    dispatch_async(global_queue_High, ^&#123;</span><br><span class="line">        NSLog(@&quot;我是第一：DISPATCH_QUEUE_PRIORITY_HIGH&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">/*</span><br><span class="line">     关灯，哥哥学习10分钟、姐姐学习20分钟、我学习15分钟，最后关灯睡觉(下面的例子1s = 1m)</span><br><span class="line">     */</span><br><span class="line">    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">    dispatch_group_t group_t = dispatch_group_create();</span><br><span class="line">    dispatch_group_async(group_t, queue, ^&#123;</span><br><span class="line">        //任务执行</span><br><span class="line">        sleep(10);</span><br><span class="line">        NSLog(@&quot;哥哥学习10分钟&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group_t, queue, ^&#123;</span><br><span class="line">        sleep(20);</span><br><span class="line">        NSLog(@&quot;姐姐学习20分钟&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group_t, queue, ^&#123;</span><br><span class="line">        sleep(15);</span><br><span class="line">        NSLog(@&quot;我学习15分钟&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_notify(group_t, queue, ^&#123;</span><br><span class="line">       //上面的线程全部完成</span><br><span class="line">        NSLog(@&quot;关灯睡觉&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">dispatch_queue_t concurrentQueueT = dispatch_queue_create(&quot;com.tiankong.GCDDemo&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">   dispatch_async(concurrentQueueT, ^&#123;</span><br><span class="line">       NSLog(@&quot;读取第一次&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   dispatch_suspend(concurrentQueueT);</span><br><span class="line">   sleep(10);</span><br><span class="line">   dispatch_resume(concurrentQueueT);</span><br><span class="line">   dispatch_async(concurrentQueueT, ^&#123;</span><br><span class="line">       NSLog(@&quot;读取第二次&quot;);</span><br><span class="line">       </span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NSTimeInterval  duration = 2.0;</span><br><span class="line">dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)((duration)/*延迟执行时间*/ * NSEC_PER_SEC));   </span><br><span class="line"> dispatch_after(delayTime, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        //执行2秒后的操作</span><br><span class="line">  &#125;);</span><br><span class="line">static dispatch_once_t predicate;</span><br><span class="line">dispatch_once(&amp;predicate, ^&#123;</span><br><span class="line">    // some one-time task</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="GCD主线程-amp-主队列的关系"><a href="#GCD主线程-amp-主队列的关系" class="headerlink" title="GCD主线程 &amp; 主队列的关系"></a>GCD主线程 &amp; 主队列的关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 主线程可以创建其他队列</span><br><span class="line">2. 主队列只能在主线程上执行(系统自己做的别无选择) 队列只是用来存放组织任务的</span><br></pre></td></tr></table></figure><h3 id="dispatch-once实现原理"><a href="#dispatch-once实现原理" class="headerlink" title="dispatch_once实现原理"></a>dispatch_once实现原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_once 内部封装了dispatch_once_f函数 这个函数操作block并完成标记为, 同时运用信号量保证只有一个线程执行,执行完成之后在缓刑其他的线程</span><br></pre></td></tr></table></figure><h3 id="什么情况下会死锁"><a href="#什么情况下会死锁" class="headerlink" title="什么情况下会死锁"></a>什么情况下会死锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在主线程中执行一个串行,并行同步的队列</span><br></pre></td></tr></table></figure><h3 id="有哪些类型的线程锁，分别介绍下作用和使用场景"><a href="#有哪些类型的线程锁，分别介绍下作用和使用场景" class="headerlink" title="有哪些类型的线程锁，分别介绍下作用和使用场景"></a>有哪些类型的线程锁，分别介绍下作用和使用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">锁是一种保证多线程并发执行安全的方式，避免 同一时间，多个线程同时读取并修改一个值而产 生混乱。</span><br><span class="line">1.自旋锁(OSSpinLock): 可以避免多线程访问同一个值发生混乱，如果共享数据已经有其他线程加锁了，线程会以死循环的方式等待锁，一旦被访问的资源被解锁， 则等待资源的线程会立即执行</span><br><span class="line">    1.1.自旋锁的性能高于互斥锁，因为响应速度快</span><br><span class="line">    1.2.自旋锁虽然会一直自旋等待获取锁，但不会一直占用CPU，超过了操作系统分配的时间片会被强制挂起</span><br><span class="line">    1.3.自旋锁如果不能保证所有线程都是同一优先级，则可能造成死锁</span><br><span class="line">2.信号量(dispatch_semaphore): 信号量如果是1的话 可以当作锁来用, 没有等待的时候而且性能很高,但是一旦出现等待性能会下降很多 但是不会消耗cpu资源</span><br><span class="line">3.互斥锁(pthread_mutex): 都可以避免多线程访问同一个值发生混乱，如果共享数据已经有其他线程加锁了，线程会进入休眠状态等待锁。一旦被访问的资源被解锁， 则等待资源的线程会被唤醒</span><br><span class="line">4.NSLock(NSLock、NSCondition、NSConditionLock、NSRecursiveLock): 都是对pthread_mutex的面向对象的封装, 遵循协议, 而且基本都是加锁解锁的直观操作</span><br><span class="line">5.@synchronized: 使用方便性能不高, 通过传入的object当做key ,通过hash表对应一个系统的递归锁,但是当用作key的对象修改了 那就没用了, 所以尽量用属性做key</span><br><span class="line">6.其他: 没涉及过 不知道 反正就这水平爱要不要</span><br></pre></td></tr></table></figure><h3 id="NSOperationQueue中的maxConcurrentOperationCount默认值"><a href="#NSOperationQueue中的maxConcurrentOperationCount默认值" class="headerlink" title="NSOperationQueue中的maxConcurrentOperationCount默认值"></a>NSOperationQueue中的maxConcurrentOperationCount默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxConcurrentOperationCount:默认情况下为-1，表示不进行限制，可进行并发执行</span><br><span class="line">NSOperation 单独使用时系统同步执行操作，配合 NSOperationQueue 我们能更好的实现异步执行</span><br></pre></td></tr></table></figure><h3 id="NSTimer、CADisplayLink、dispatch-source-t-的优劣"><a href="#NSTimer、CADisplayLink、dispatch-source-t-的优劣" class="headerlink" title="NSTimer、CADisplayLink、dispatch_source_t 的优劣"></a>NSTimer、CADisplayLink、dispatch_source_t 的优劣</h3><pre><code>1. NSTimer:    缺点:因为取决于runloop的mode 所以计时不精确2.CADisplayLink    优点:根据设备屏幕刷新频率进行计算的,比较准确    缺点:1. 依托于屏幕刷新,如果cpu负担重屏幕刷新不及时事件响应就会受影响        2. 事件触发只能是屏幕刷新频率的倍数        3. 如果事件触发大于屏幕刷新频率就会出现掉帧现象(我是没看明白这句可以不说)3. GCD-dispatch_source_t    优点: 不受runloop影响    缺点: 1.dispatch_source_t 一定要被设置为成员变量，否则将会立即被释放        2. 计时依然不是特别准确</code></pre><h2 id="—-6"><a href="#—-6" class="headerlink" title="—"></a>—</h2><h1 id="视图-amp-图像相关"><a href="#视图-amp-图像相关" class="headerlink" title="视图&amp;图像相关"></a>视图&amp;图像相关</h1><h3 id="AutoLayout的原理，性能如何"><a href="#AutoLayout的原理，性能如何" class="headerlink" title="AutoLayout的原理，性能如何"></a>AutoLayout的原理，性能如何</h3><p>Auto Layout ，是苹果公司提供的一个基于约束布局，动态计算视图大小和位置的库<br>原理:</p><ol><li>autolayout是在一个一秒刷新120次的layoutloop下完成的</li><li>新布局产生会从下而上的一层一层的上报给上一个视图一直到window</li><li>每一个接受的到视图开始运行layoutsubviews和更新约束从相反的方向开始</li><li>每一个渲染的view 从父view向下开始渲染<br>从ios12之后autolayout的性能得到的大幅度的提升基本与手动添加约束性能差不多</li></ol><h3 id="UIView-amp-CALayer的区别"><a href="#UIView-amp-CALayer的区别" class="headerlink" title="UIView &amp;; CALayer的区别"></a>UIView &amp;; CALayer的区别</h3><ol><li>uiview是所有界面展示的基础 所有的界面都是继承于他, uiview真正的绘图部分是calalyer来实现的, uiview更想是一个calayer的管理类,</li><li>calayer是为了内容展示和动画操作实现的类 但是calayer并不能响应事件, 所以所有的响应事件的操作是uiview来实现的</li><li>uiview的layer和view一样也有树状层次结构 分为三种被系统维护着<br> 逻辑树: 用于代码操作来更改layer属性的<br> 动画树: 系统用来渲染到屏幕上的内容<br> 显示树: 正在屏幕上显示的内容</li><li>uiview的主layer外 还可以对sublayer进行属性更改, 系统将自动进行动画处理</li><li>calayer比uiview在frame上多了一个anchorpoint的属性(CGPoint结构)但是是在0到1之间按照比例设置,这个点是各种图形变换的坐标原点，同时会更改layer的position的位置 是在中间的远点</li></ol><h3 id="drawrect-layoutsubviews调用时机"><a href="#drawrect-layoutsubviews调用时机" class="headerlink" title="drawrect  layoutsubviews调用时机"></a>drawrect  layoutsubviews调用时机</h3><p>layoutsubviews触发时机:<br>1.init不会出发<br>2.addsubview时触发<br>3.当一个uiview的frame发生改变时候触发</p><ol><li>滚动scrollerview导致uiview重新布局之后触发<br>5.旋转屏幕导致父view上的layer触发<br>6.主动调用setneedlayout 或者 layoutifneeded触发</li></ol><p>drawrect触发时机:<br>1.view init时如果不主动设置rect大小的时候不触发<br>2.controller 调用完loadview 和 viewdidload之后触发<br>3.在调用sizetofit之后触发<br>4.通过设置contentmode属性的UIViewContentModeRedraw 将会在每次设置或者更改frame时候触发<br>5.主动调用setneedsdisplay 和 setneedsdisplayinrect rect又不为0的前提下触发</p><h3 id="UI的刷新原理"><a href="#UI的刷新原理" class="headerlink" title="UI的刷新原理"></a>UI的刷新原理</h3><ol><li>当一个ui需要更新时系统会自动的去请求drawrect方法</li><li>系统通过原生api 绘制你需要展示的部分</li><li>在第一次绘图时候系统会通过正方形区域来表示你需要绘制的区域</li><li>刷新的时候重绘受影响的部分区域</li></ol><h3 id="隐式动画-amp-显示动画区别"><a href="#隐式动画-amp-显示动画区别" class="headerlink" title="隐式动画 &amp; 显示动画区别"></a>隐式动画 &amp; 显示动画区别</h3><p>1.隐式动画是一直存在的 如需关闭需设置；显式动画是不存在的，如需显式 要自行创建</p><ol><li>隐式动画调用UIView的animateWithDuration:animations:实现动画<br>显示动画调用beginAnimations:context:和commitAnimations创建的动画</li><li>隐式动画是系统自动创建的core animation 会在每一个runloop周期中开始一次新的事务, 任何一次runloop中的属性修改都会被集中起来做一个0.25秒的动画</li><li>显式动画既可以对退增属性做动画也可以覆盖默认的图层行为,并且显示动画的caanimation类型都可以直接加到calayer上</li></ol><h3 id="什么是离屏渲染"><a href="#什么是离屏渲染" class="headerlink" title="什么是离屏渲染"></a>什么是离屏渲染</h3><p>On-Screen Rendering意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。<br>Off-Screen Rendering意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。<br>特殊的离屏渲染: cpu渲染 如果我们重写drawrect方法并且使用任何core  Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内 同步地完成，渲染得到的bitmap最后再交由GPU用于显示。</p><h3 id="图片渲染怎么优化"><a href="#图片渲染怎么优化" class="headerlink" title="图片渲染怎么优化"></a>图片渲染怎么优化</h3><p><a href="https://www.jianshu.com/p/748f9abafff8" target="_blank" rel="noopener">https://www.jianshu.com/p/748f9abafff8</a></p><ol><li>更好的利用cpu和gpu资源<br>2.尽量的少重写drarec土方法 会造成离屏渲染<br>3.尽量的减少圆角,阴影等离屏渲染的方法<br>4.尽量少的使用奇怪的图片格式和大小</li></ol><h2 id="—-7"><a href="#—-7" class="headerlink" title="—"></a>—</h2><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h3 id="如何做启动优化，如何监控"><a href="#如何做启动优化，如何监控" class="headerlink" title="如何做启动优化，如何监控"></a>如何做启动优化，如何监控</h3><p><a href="https://www.jianshu.com/p/2a930b3a14d3" target="_blank" rel="noopener">https://www.jianshu.com/p/2a930b3a14d3</a></p><p>1.main() 函数执行前:<br>    1.减少动态库加载；<br>    2.减少加载启动后不会去使用的类或方法；<br>    3.+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用+initialize() 方法替换掉。<br>    4.控制 C++ 全局变量的数量。<br>2.main() 函数执行后；<br>3.首屏渲染完成后。</p><pre><code>1. didFinishLaunchingWithOptions在这个方法之后开始加载与首屏渲染无关是事物2. 第三方初始化放入到首页vc3. 尽量在功能需要的时候再初始化该功能实例</code></pre><h2 id="—-8"><a href="#—-8" class="headerlink" title="—"></a>—</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;runtime篇章&quot;&gt;&lt;a href=&quot;#runtime篇章&quot; class=&quot;headerlink&quot; title=&quot;runtime篇章&quot;&gt;&lt;/a&gt;runtime篇章&lt;/h1&gt;&lt;h2 id=&quot;—&quot;&gt;&lt;a href=&quot;#—&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>rsa加密解密/ios生成证书/同时保留两个xcode/获取app的IDFA问题/ipa打包/ios11 短信界面自定义表情</title>
    <link href="http://yoursite.com/2018/01/05/rsa%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2018/01/05/rsa%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</id>
    <published>2018-01-05T07:13:41.000Z</published>
    <updated>2018-01-08T06:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rsa加密解密"><a href="#rsa加密解密" class="headerlink" title="rsa加密解密"></a>rsa加密解密</h1><p><a href="http://code4app.com/thread-7750-1-1.html" target="_blank" rel="noopener">http://code4app.com/thread-7750-1-1.html</a></p><p><a href="http://blog.csdn.net/woaifen3344/article/details/50330439" target="_blank" rel="noopener">http://blog.csdn.net/woaifen3344/article/details/50330439</a></p><p><a href="http://yuur369.iteye.com/blog/1769395" target="_blank" rel="noopener">http://yuur369.iteye.com/blog/1769395</a></p><p><a href="http://www.cnblogs.com/efzju/p/4966519.html" target="_blank" rel="noopener">http://www.cnblogs.com/efzju/p/4966519.html</a></p><p><a href="http://www.cnblogs.com/efzju/p/4966519.html" target="_blank" rel="noopener">http://www.cnblogs.com/efzju/p/4966519.html</a></p><p><a href="http://blog.chinaunix.net/uid-26575352-id-3073802.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-26575352-id-3073802.html</a></p><p><a href="https://zhidao.baidu.com/question/919312969313904739.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/919312969313904739.html</a></p><p><a href="http://bbs.csdn.net/topics/391823627?page=1" target="_blank" rel="noopener">http://bbs.csdn.net/topics/391823627?page=1</a></p><h1 id="ios-java-rsa-加密解密互调"><a href="#ios-java-rsa-加密解密互调" class="headerlink" title="ios  java rsa 加密解密互调"></a>ios  java rsa 加密解密互调</h1><p><a href="http://blog.csdn.net/showhilllee/article/details/50592003" target="_blank" rel="noopener">http://blog.csdn.net/showhilllee/article/details/50592003</a></p><h1 id="自定义密钥对解密"><a href="#自定义密钥对解密" class="headerlink" title="自定义密钥对解密"></a>自定义密钥对解密</h1><p>服务端对java 和 ios 加密的逻辑不一样 针对ios需要部分解码</p><h2 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意 :"></a>特别注意 :</h2><p>服务端发来的字符串是16进制字符串  需要转为正常的字符串 然后data encode64  后 在 utf8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//16进制字符串转成正常字符串 param : 获取到的服务端字符串</span><br><span class="line">+ (NSString*)stringToByte:(NSString*)string</span><br><span class="line">&#123;</span><br><span class="line">NSString *hexString=[[string uppercaseString] stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</span><br><span class="line">if ([hexString length]%2!=0) &#123;</span><br><span class="line">return nil;</span><br><span class="line">&#125;</span><br><span class="line">Byte tempbyt[1]=&#123;0&#125;;</span><br><span class="line">NSMutableData* bytes=[NSMutableData data];</span><br><span class="line">for(int i=0;i&lt;[hexString length];i++)</span><br><span class="line">&#123;</span><br><span class="line">unichar hex_char1 = [hexString characterAtIndex:i]; ////两位16进制数中的第一位(高位*16)</span><br><span class="line">int int_ch1;</span><br><span class="line">if(hex_char1 &gt;= &apos;0&apos; &amp;&amp; hex_char1 &lt;=&apos;9&apos;)</span><br><span class="line">int_ch1 = (hex_char1-48)*16;   //// 0 的Ascll - 48</span><br><span class="line">else if(hex_char1 &gt;= &apos;A&apos; &amp;&amp; hex_char1 &lt;=&apos;F&apos;)</span><br><span class="line">int_ch1 = (hex_char1-55)*16; //// A 的Ascll - 65</span><br><span class="line">else</span><br><span class="line">return nil;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">unichar hex_char2 = [hexString characterAtIndex:i]; ///两位16进制数中的第二位(低位)</span><br><span class="line">int int_ch2;</span><br><span class="line">if(hex_char2 &gt;= &apos;0&apos; &amp;&amp; hex_char2 &lt;=&apos;9&apos;)</span><br><span class="line">int_ch2 = (hex_char2-48); //// 0 的Ascll - 48</span><br><span class="line">else if(hex_char2 &gt;= &apos;A&apos; &amp;&amp; hex_char2 &lt;=&apos;F&apos;)</span><br><span class="line">int_ch2 = hex_char2-55; //// A 的Ascll - 65</span><br><span class="line">else</span><br><span class="line">return nil;</span><br><span class="line"></span><br><span class="line">tempbyt[0] = int_ch1+int_ch2;  ///将转化后的数放入Byte数组里</span><br><span class="line">[bytes appendBytes:tempbyt length:1];</span><br><span class="line">&#125;</span><br><span class="line">NSData * lastdata = [[NSData alloc]initWithData:bytes];</span><br><span class="line">lastdata = [lastdata base64EncodedDataWithOptions:0];</span><br><span class="line">NSString *lastStr = [[NSString alloc] initWithData:lastdata encoding:NSUTF8StringEncoding];</span><br><span class="line"></span><br><span class="line">//    NSString * lastStr = [[NSString alloc] initWithData:bytes encoding:NSUTF16StringEncoding];</span><br><span class="line"></span><br><span class="line">return lastStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//以上方法获取到的字符串数据需要在进行处理  param str :以上方法处理的字符串;  param privKey :私钥字符串</span><br><span class="line">+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey&#123;</span><br><span class="line">if (!str) return nil;</span><br><span class="line">NSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];</span><br><span class="line">//base64解码后的数据再进行私钥解密, 然后在utf8编码</span><br><span class="line">data = [self decryptData:data privateKey:privKey];</span><br><span class="line">NSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ios生成证书"><a href="#ios生成证书" class="headerlink" title="ios生成证书"></a>ios生成证书</h1><p><a href="http://www.jianshu.com/p/60d9e854d484" target="_blank" rel="noopener">http://www.jianshu.com/p/60d9e854d484</a></p><h1 id="同时保留两个xcode"><a href="#同时保留两个xcode" class="headerlink" title="同时保留两个xcode"></a>同时保留两个xcode</h1><p><a href="http://www.jianshu.com/p/bb97c2824077" target="_blank" rel="noopener">http://www.jianshu.com/p/bb97c2824077</a></p><h1 id="app加密问题"><a href="#app加密问题" class="headerlink" title="app加密问题"></a>app加密问题</h1><p><a href="http://www.cnblogs.com/shen5214444887/p/5238441.html" target="_blank" rel="noopener">http://www.cnblogs.com/shen5214444887/p/5238441.html</a></p><h1 id="获取app的IDFA问题"><a href="#获取app的IDFA问题" class="headerlink" title="获取app的IDFA问题"></a>获取app的IDFA问题</h1><p><a href="http://www.jianshu.com/p/78d1fbc24e77" target="_blank" rel="noopener">http://www.jianshu.com/p/78d1fbc24e77</a></p><h1 id="ipa-打包"><a href="#ipa-打包" class="headerlink" title="ipa : 打包"></a>ipa : 打包</h1><p><a href="https://www.lewanny.com/2016/iOS-achive-ipa-package-methods/" target="_blank" rel="noopener">https://www.lewanny.com/2016/iOS-achive-ipa-package-methods/</a></p><p><a href="http://www.cnblogs.com/wengzilin/p/4601684.html" target="_blank" rel="noopener">http://www.cnblogs.com/wengzilin/p/4601684.html</a></p><p><a href="http://www.cocoachina.com/bbs/read.php?tid-328035.html" target="_blank" rel="noopener">http://www.cocoachina.com/bbs/read.php?tid-328035.html</a></p><h1 id="ios11-短信界面自定义表情"><a href="#ios11-短信界面自定义表情" class="headerlink" title="ios11 短信界面自定义表情"></a>ios11 短信界面自定义表情</h1><p><a href="http://swift.gg/2016/06/29/message-sticker-app/" target="_blank" rel="noopener">http://swift.gg/2016/06/29/message-sticker-app/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rsa加密解密&quot;&gt;&lt;a href=&quot;#rsa加密解密&quot; class=&quot;headerlink&quot; title=&quot;rsa加密解密&quot;&gt;&lt;/a&gt;rsa加密解密&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://code4app.com/thread-7750-1-1.html&quot;
      
    
    </summary>
    
    
    
      <category term="技术探索" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>IOS RunTime</title>
    <link href="http://yoursite.com/2018/01/05/IOS-RunTime/"/>
    <id>http://yoursite.com/2018/01/05/IOS-RunTime/</id>
    <published>2018-01-05T07:05:09.000Z</published>
    <updated>2018-01-08T06:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RunTime小结"><a href="#RunTime小结" class="headerlink" title="RunTime小结"></a>RunTime小结</h1><h2 id="搬运大佬的经验-在这里还是惯例的感谢大佬的技术支持"><a href="#搬运大佬的经验-在这里还是惯例的感谢大佬的技术支持" class="headerlink" title="搬运大佬的经验, 在这里还是惯例的感谢大佬的技术支持"></a>搬运大佬的经验, 在这里还是惯例的感谢大佬的技术支持</h2><p><a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="noopener">http://tech.glowing.com/cn/objective-c-runtime/</a></p><p><a href="http://www.jianshu.com/p/73e454178e77" target="_blank" rel="noopener">http://www.jianshu.com/p/73e454178e77</a></p><p><img src="/images/runtime1.jpg" alt="&quot;image&quot;"></p><p><img src="/images/runtime2.jpg" alt="&quot;image&quot;"></p><p><img src="/images/runtime3.jpg" alt="&quot;image&quot;"></p><p><img src="/images/runtime4.jpg" alt="&quot;image&quot;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RunTime小结&quot;&gt;&lt;a href=&quot;#RunTime小结&quot; class=&quot;headerlink&quot; title=&quot;RunTime小结&quot;&gt;&lt;/a&gt;RunTime小结&lt;/h1&gt;&lt;h2 id=&quot;搬运大佬的经验-在这里还是惯例的感谢大佬的技术支持&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
    
      <category term="ios开发" scheme="http://yoursite.com/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
